* Css笔记
** before
   ::before或者:before
   就是在某个元素前面添加什么。
   使用属性content。例子：在li元素前添加斜杠。
   li :before {
   content: "/\00a0" ;
   }

   li的before还有些问题
   ul.breadcrumb li:before {
    padding: 8px;
    color: black;
    content: "/\00a0";
    }

    和
    ul.breadcrumb li :before {
    padding: 8px;
    color: black;
    content: "/\00a0";
    }
    不一样，至于为什么不一样？？？不知道，google。

** +号和before
** hover 很重要的
   这里有个问题就是：
   a:hover，这个a和冒号之间不能有空格。

   hover是徘徊，盘旋的意思，在css中应该是mouse over，就是将鼠标移上去，
   可以对所有元素有效，不仅仅是a标签，但是很明显的，是对于很多能够点的事物，
   因为你将鼠标悬停到哪里之后，改变颜色，提示用户，就是想让别人点的。

   对于a元素，还能使用:link给未访问的url加样式，:visited已访问的，:active，哈哈哈，一点击就出的效果。

   如果出现了:link，:visited，那么:hover必须在:link和:visited后面，才能起效。
   我草，做了个试验，:hover在前，:active在后，直接移动鼠标上去，hover不起效果，如果点击的话，
   会先有:active的效果，然后再有:hover的效果。

   知道+号撒意思了：
   就是操作另外一个selector。
   span:hover div{
    display: none;
   }
   就是当在span元素上hover的时候，所有div元素隐藏。

   但是使用+号，有个问题（还是使用hover的问题），就是必须是同级元素？？？

   [[https://www.w3schools.com/cssref/sel_hover.asp][w3schools css :hover]]
*** hover dropdown menu 还没搞完。
    [[https://www.w3schools.com/cssref/tryit.asp?filename=trycss_sel_hover_dropdown][w3c css hover dropdown menu]]
    首先看 *结构* ，整个html页面的结构。
    有2个横条的父ul，然后有个li有子的ul。这里不对，其实是另外一个ul，ul之间并没父子关系？
    只是逻辑结构有。



    结构搞清楚之后，就可以开始写html。其实html就是结构化的东西。

    写好html之后，应该是用容器包裹，开始布局。

    写好html之后，使用selector选择器找到目标元素，然后添加样式。that's all，gotta it.
** 多个选择器，用逗号分开，但是必须先戴上要作用的效果
   p:hover,a:hover,h1:hover{
       color:yellow;
   }

** !important撒意思
   https://stackoverflow.com/questions/9245353/what-does-important-in-css-mean
   看这个解释好像是，使得不会被更明确的selector重写属性。

** +号
   element+element	div + p	Selects all <p> elements that are placed immediately after <div> elements
   尼玛的，就是选择div标签后面立刻跟随的所有p元素。而且不是div里面，必须是在div结束后。
   例子：
   <style>
     div + p {
      color:red;
     }
   </style>
   <div>
    <p>hello</p>
    <p>hello2</p>
    <p>hello3</p>
    </div>
    <p>hello4</p>
    <p>hello5</p>
    <p>hello6</p>

    结果只有hello4是红色字体。
    我草，这里还有个坑，尼玛的，老子终于算搞懂了。就是+的前后元素必须是同级的，
    如果父级元素+子级元素，就没有效果。果然如此啊，我草。

    草，真不容易，我
RTM的。
** align-content
   首先外围的block元素必须是display: flex;的，其次align-content才有效。就是将一些元素打包，搞在一起。
   而且是用来调整flex-wrap: warp;的行为的。

** ul align left
   ul和li默认是有margin和padding的，可以用F12看google中的
   继承的是-webkit-margin-before,after等等。
** 注意事项
   针对margin-top,margin-bottom,padding-top,padding-bottom，如果使用百分比，
   那么是父元素的宽度作为分母，而不是高度。

   为嘛？
   使用position之后使用top，right，bottom，left属性。
   默认是static，top，right等属性无效。是根据页面的flow？？？

   *relative是相对于它原本的位置，也就是position:static的位置。*

   妈个比，老子测试一下，出来了。使用relative是相对于原本应该在的位置，
   如果使用top:50%，那么必须父元素设置了height，并且这个height并不是因为子元素填充而形成的，
   而是一个固定的或者从父元素继承而来的不变的长度。

   但是left:50%为嘛又可以了？因为默认width就是填充满屏幕的？

   absolute
   *针对最近的第一个positioned的祖先元素，而positioned的就是非position:static的元素。*

   有包含关系的，在容器里面的元素，最好用relative？

   sticky，根据用户的滚动位置

   当元素被positioned以后（position!=static默认值），就可以重叠了。
   如果没有被positioned，就是没有设置position属性（默认值为static），那么就会根据flow排列。

   使用z-index设置层叠顺序。

** 选择器必须能唯一确定一个元素才能生效
   比如多个ul，不能直接用ul，然后对所有ul操作。
   不对吧？妈的，搞错了，用错了p选择器。
** 透明度，遮罩
   使用opacity，值从0.0到1.0。会被子元素继承。
   还可以通过给backgroud赋予rgb，来定义透明度，比如
   background: rgba(76, 175, 80, 0.3) /* Green background with 30% opacity */

** 命名技巧
   看看w3shools，一组button的命名，首先都是button，其实有不同的button1，button2
   <button class="button button1">10px</button>
   <button class="button button2">12px</button>
   <button class="button button3">16px</button>
   <button class="button button4">20px</button>
   <button class="button button5">24px</button>
