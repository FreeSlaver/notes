* 面试题大全集
** 基础
*** 集合
**** ConcurrentHashMap底层实现机制
     http://www.cnblogs.com/chengxiao/p/6842045.html
**** 某个集合的常用方法
*** IO/NIO
** 多线程并发
*** 可重入锁
    可重入锁指的是可重复可递归调用的锁，在外层使用锁之后，在内层仍然可以使用，并且不发生死锁（前提得是同一个对象或者class），这样的锁就叫做可重入锁。
    ReentrantLock和synchronized都是可重入锁，

    不可重入锁，与可重入锁相反，不可递归调用，递归调用就发生死锁。内部基于AQS
    官方说明：一个可重入的互斥锁定 Lock，它具有与使用 synchronized 方法和语句所访问的隐式监视器锁定相同的一些基本行为和语义，但功能更强大。
    ReentrantLock 将由最近成功获得锁定，并且还没有释放该锁定的线程所拥有。当锁定没有被另一个线程所拥有时，调用 lock 的线程将成功获取该锁定并返回。
    如果当前线程已经拥有该锁定，此方法将立即返回。可以使用 isHeldByCurrentThread() 和 getHoldCount() 方法来检查此情况是否发生。

*** Java中synchronized 和 ReentrantLock 有什么不同
*** Java中的ReadWriteLock是什么？
    一般而言，读写锁是用来提升并发程序性能的锁分离技术的成果。Java中的ReadWriteLock是Java 5 中新增的一个接口，
    一个ReadWriteLock维护一对关联的锁，一个用于只读操作一个用于写。在没有写线程的情况下一个读锁可能会同时被多个读线程持有。
    写锁是独占的，你可以使用JDK中的ReentrantReadWriteLock来实现这个规则，它最多支持65535个写锁和65535个读锁。


*** Lock和synchronize关键字区别
    lock()：以阻塞式获取锁，没有获取到一直等待，不会被中断。
    性能不一致：
    资源竞争激烈的情况下，lock性能会比synchronize好，竞争不激烈的情况下，synchronize比lock性能好。
    锁机制不一样：
    synchronize是在JVM层面实现的，系统会监控锁的释放与否。lock是代码实现的，需要手动释放，在finally块中释放。可以采用非阻塞的方式获取锁。
    用法不一样：
    synchronize可以用在代码块上，方法上。lock通过代码实现，有更精确的线程语义。
*** 线程的基本概念、线程的基本状态及状态之间的关系？
    线程状态：初始化，可运行，运行，
    sleep()方法进入阻塞，不释放资源
    yield()方法进入可运行，释放资源，
    重新可运行时，抢不到锁，进入锁池等待，
    wait()方法后进入等待队列，释放所有资源，调用notify唤醒，终止，
*** 阻塞队列是什么
*** 线程池有哪些，参数是什么，拒绝策略有哪些
    new ThreadPoolExecutor(corePoolSize, maximumPoolSize,keepAliveTime,
    milliseconds,runnableTaskQueue, threadFactory,handler);


    4种线程池：
    CachedThreadPool
    FixedThreadPool
    ScheduleThreadPool
    SingleThreadPool

** Spring

*** 2. 使用Spring框架的好处是什么？
    轻量，控制反转IOC，面向切面编程AOP，容器管理，MVC，事物管理，日志管理，异常处理
    大部分的Spring bean并没有可变的状态(比如Serview类和DAO类)，所以在某种程度上说Spring的单例bean是线程安全的。如果你的bean有多种状态的话（比如 View Model 对象），就需要自行保证线程安全。
***  Spring由哪些模块组成?
以下是Spring 框架的基本模块：

Core module
Bean module
Context module
Expression Language module
JDBC module
ORM module
OXM module
Java Messaging Service(JMS) module
Transaction module
Web module
Web-Servlet module
Web-Struts module
Web-Portlet module
*** ApplicationContext实现方式
    1、ClassPathXmlApplicationContext：从classpath的XML配置文件中读取上下文，并生成上下文定义。应用程序上下文从程序环境变量中取得。
    ApplicationContext context = new ClassPathXmlApplicationContext(“bean.xml”);
    2、FileSystemXmlApplicationContext ：由文件系统中的XML配置文件读取上下文。
    ApplicationContext context = new FileSystemXmlApplicationContext(“bean.xml”);
    3、XmlWebApplicationContext：由Web应用的XML文件读取上下文。
*** AOP IOC
3.  什么是Spring IOC 容器？
Spring IOC 负责创建对象，管理对象（通过依赖注入（DI），装配对象，配置对象，并且管理这些对象的整个生命周期。

14.  IOC的优点是什么？
IOC 或 依赖注入把应用的代码量降到最低。它使应用容易测试，单元测试不再需要单例和JNDI查找机制。最小的代价和最小的侵入性使松散耦合得以实现。IOC容器支持加载服务时的饿汉式初始化和懒加载。
*** AOP实现
    AOP可以说是对OOP的补充和完善。OOP引入封装、继承和多态性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合。当我们需要为分散的对象引入公共行为的时候，OOP则显得无能为力。也就是说，OOP允许你定义从上到下的关系，但并不适合定义从左到右的关系。例如日志功能。日志代码往往水平地散布在所有对象层次中，而与它所散布到的对象的核心功能毫无关系。在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。
    实现AOP的技术，主要分为两大类：一是采用动态代理技术，利用截取消息的方式，对该消息进行装饰，以取代原有对象行为的执行；二是采用静态织入的方式，引入特定的语法创建“方面”，从而使得编译器可以在编译期间织入有关“方面”的代码
    如果面试官硬要给你扯原理，你也跟他扯
    面试就是要装B
    所以必须得深化点，你得告诉他，aop实现原理其实是java动态代理，但是jdk的动态代理必须实现接口，所以spring的aop是用cglib这个库实现的，cglib使用了asm这个直接操纵字节码的框架，所以可以做到不实现接口的情况下完成动态代理。
    最好拿张纸手写两个例子给他，然后他就没什么好问的了
*** Spring MVC
64. 什么是Spring的MVC框架？
Spring 配备构建Web 应用的全功能MVC框架。Spring可以很便捷地和其他MVC框架集成，如Struts，Spring 的MVC框架用控制反转把业务对象和控制逻辑清晰地隔离。它也允许以声明的方式把请求参数和业务对象绑定。
*** 解释Spring支持的几种bean的作用域。
    Spring框架支持以下五种bean的作用域：
    singleton : bean在每个Spring ioc 容器中只有一个实例。
    prototype：一个bean的定义可以有多个实例。
    request：每次http请求都会创建一个bean，该作用域仅在基于web的Spring ApplicationContext情形下有效。
    session：在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。
    global-session：在一个全局的HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。
*** 解释Spring框架中bean的生命周期。
    Spring容器 从XML 文件中读取bean的定义，并实例化bean。
    Spring根据bean的定义填充所有的属性。
    如果bean实现了BeanNameAware 接口，Spring 传递bean 的ID 到 setBeanName方法。
    如果Bean 实现了 BeanFactoryAware 接口， Spring传递beanfactory 给setBeanFactory 方法。
    如果有任何与bean相关联的BeanPostProcessors，Spring会在postProcesserBeforeInitialization()方法内调用它们。
    如果bean实现IntializingBean了，调用它的afterPropertySet方法，如果bean声明了初始化方法，调用此初始化方法。
    如果有BeanPostProcessors 和bean 关联，这些bean的postProcessAfterInitialization() 方法将被调用。
    如果bean实现了 DisposableBean，它将调用destroy()方法
*** 33. 解释不同方式的自动装配 。
有五种自动装配的方式，可以用来指导Spring容器用自动装配方式来进行依赖注入。

no：默认的方式是不进行自动装配，通过显式设置ref 属性来进行装配。
byName：通过参数名 自动装配，Spring容器在配置文件中发现bean的autowire属性被设置成byname，之后容器试图匹配、装配和该bean的属性具有相同名字的bean。
byType:：通过参数类型自动装配，Spring容器在配置文件中发现bean的autowire属性被设置成byType，之后容器试图匹配、装配和该bean的属性具有相同类型的bean。如果有多个bean符合条件，则抛出错误。
constructor：这个方式类似于byType， 但是要提供给构造器参数，如果没有确定的带参数的构造器参数类型，将会抛出异常。
autodetect：首先尝试使用constructor来自动装配，如果无法工作，则使用byType方式。

*** 25、Spring 框架中都用到了哪些设计模式？
Spring框架中使用到了大量的设计模式，下面列举了比较有代表性的：

代理模式—在AOP和remoting中被用的比较多。
单例模式—在spring配置文件中定义的bean默认为单例模式。
模板方法—用来解决代码重复的问题。比如. RestTemplate, JmsTemplate, JpaTemplate。
前端控制器—Spring提供了DispatcherServlet来对请求进行分发。
视图帮助(View Helper )—Spring提供了一系列的JSP标签，高效宏来辅助将分散的代码整合在视图里。
依赖注入—贯穿于BeanFactory / ApplicationContext接口的核心理念。
工厂模式—BeanFactory用来创建对象的实例。
** 数据库
*** 事务隔离级别
*** 优化
*** 索引
    最左原则，
** 设计模式
** 分布式
*** 分布式事务
*** 微服务
*** 分布式锁
** JVM
*** JVM优化
** Redis
*** 数据淘汰策略
    volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰
    volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰
    volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰
    allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰
    allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰
    no-enviction：禁止驱逐
*** Redis持久化机制
    RDB和AOF，

    你应该同时使用两种持久化功能。如果你非常关心你的数据， 但仍然可以承受数分钟以内的数据丢失，那么你可以只使用RDB持久化。

有很多用户都只使用AOF持久化，但并不推荐这种方式：因为定时生成RDB快照（snapshot）非常便于进行数据库备份， 并且 RDB 恢复数据集的速度也要比AOF恢复的速度要快，除此之外， 使用RDB还可以避免之前提到的AOF程序的bug。


对方追问bgsave的原理是什么？你给出两个词汇就可以了，fork和cow。
fork是指redis通过创建子进程来进行bgsave操作，cow指的是copy on write，
子进程创建后，父子进程共享数据段，父进程继续提供读写服务，写脏的页面数据会逐渐和子进程分离开来。

*** Redis常见性能问题和解决方案:
    尽可能使用hash，占用内存最小
    Master最好不要做任何持久化工作，如RDB内存快照和AOF日志文件
    如果数据比较重要，某个Slave开启AOF备份数据，策略设置为每秒同步一次
    为了主从复制的速度和连接的稳定性，Master和Slave最好在同一个局域网内
    尽量避免在压力很大的主库上增加从库

*** Redis的同步机制了解么？
    Redis可以使用主从同步，从从同步。第一次同步时，主节点做一次bgsave，并同时将后续修改操作记录到内存buffer，
    待完成后将rdb文件全量同步到复制节点，复制节点接受完成后将rdb镜像加载到内存。
    加载完成后，再通知主节点将期间修改的操作记录同步到复制节点进行重放就完成了同步过程。
*** Redis常用场景
13、Redis有哪些适合的场景？

（1）、会话缓存（Session Cache）

最常用的一种使用Redis的情景是会话缓存（session cache）。用Redis缓存会话比其他存储（如Memcached）的优势在于：Redis提供持久化。当维护一个不是严格要求一致性的缓存时，如果用户的购物车信息全部丢失，大部分人都会不高兴的，现在，他们还会这样吗？

幸运的是，随着 Redis 这些年的改进，很容易找到怎么恰当的使用Redis来缓存会话的文档。甚至广为人知的商业平台Magento也提供Redis的插件。

（2）、全页缓存（FPC）

除基本的会话token之外，Redis还提供很简便的FPC平台。回到一致性问题，即使重启了Redis实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似PHP本地FPC。

再次以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。

此外，对WordPress的用户来说，Pantheon有一个非常好的插件 wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。

（3）、队列

Reids在内存存储引擎领域的一大优点是提供 list 和 set 操作，这使得Redis能作为一个很好的消息队列平台来使用。Redis作为队列使用的操作，就类似于本地程序语言（如Python）对 list 的 push/pop 操作。

如果你快速的在Google中搜索“Redis queues”，你马上就能找到大量的开源项目，这些项目的目的就是利用Redis创建非常好的后端工具，以满足各种队列需求。例如，Celery有一个后台就是使用Redis作为broker，你可以从这里去查看。

（4），排行榜/计数器

Redis在内存中对数字进行递增或递减的操作实现的非常好。集合（Set）和有序集合（Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis只是正好提供了这两种数据结构。所以，我们要从排序集合中获取到排名最靠前的10个用户–我们称之为“user_scores”，我们只需要像下面一样执行即可：

当然，这是假定你是根据你用户的分数做递增的排序。如果你想返回用户及用户的分数，你需要这样执行：

ZRANGE user_scores 0 10 WITHSCORES

Agora Games就是一个很好的例子，用Ruby实现的，它的排行榜就是使用Redis来存储数据的，你可以在这里看到。

（5）、发布/订阅

最后（但肯定不是最不重要的）是Redis的发布/订阅功能。发布/订阅的使用场景确实非常多。我已看见人们在社交网络连接中使用，还可作为基于发布/订阅的脚本触发器，甚至用Redis的发布/订阅功能来建立聊天系统！（不，这是真的，你可以去核实）。


作者：烙印99
链接：https://www.imooc.com/article/36399
来源：慕课网
*** Redis和memcache比较
    1 、Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，zset，hash等数据结构的存储。memcache支持简单的数据类型，String。
    2 、Redis支持数据的备份，即master-slave模式的数据备份。
    3 、Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用,而Memecache把数据全部存在内存之中
    4、 redis的速度比memcached快很多
    5、Memcached是多线程，非阻塞IO复用的网络模型；Redis使用单线程的IO复用模型。
    6. Redis的value可以最大为1G，而memcache只能为几M
*** Redis集群方案应该怎么做？都有哪些方案？
    1.twemproxy，大概概念是，它类似于一个代理方式，使用方法和普通redis无任何区别，设置好它下属的多个redis实例后，使用时在本需要连接redis的地方改为连接twemproxy，它会以一个代理的身份接收请求并使用一致性hash算法，将请求转接到具体redis，将结果再返回twemproxy。使用方式简便(相对redis只需修改连接端口)，对旧项目扩展的首选。 问题：twemproxy自身单端口实例的压力，使用一致性hash后，对redis节点数量改变时候的计算值的改变，数据无法自动移动到新的节点。

    2.codis，目前用的最多的集群方案，基本和twemproxy一致的效果，但它支持在 节点数量改变情况下，旧节点数据可恢复到新hash节点。

    3.redis cluster3.0自带的集群，特点在于他的分布式算法不是一致性hash，而是hash槽的概念，以及自身支持节点设置从节点。具体看官方文档介绍。

    4.在业务代码层实现，起几个毫无关联的redis实例，在代码层，对key 进行hash计算，然后去对应的redis实例操作数据。 这种方式对hash层代码要求比较高，考虑部分包括，节点失效后的替代算法方案，数据震荡后的自动脚本恢复，实例的监控，等等。
    Redis Sentinal着眼于高可用，在master宕机时会自动将slave提升为master，继续提供服务。
    Redis Cluster着眼于扩展性，在单个redis内存不足时，使用Cluster进行分片存储。
*** 你知道有哪些Redis集群分区实现方案？
    客户端分区就是在客户端就已经决定数据会被存储到哪个redis节点或者从哪个redis节点读取。大多数客户端已经实现了客户端分区。
    代理分区 意味着客户端将请求发送给代理，然后代理决定去哪个节点写数据或者读数据。
    代理根据分区规则决定请求哪些Redis实例，然后根据Redis的响应结果返回给客户端。redis和memcached的一种代理实现就是Twemproxy
    查询路由(Query routing) 的意思是客户端随机地请求任意一个redis实例，然后由Redis将请求转发给正确的Redis节点。
*** Redis集群分区有什么缺点？
    涉及多个key的操作通常不会被支持。例如你不能对两个集合求交集，因为他们可能被存储到不同的Redis实例（实际上这种情况也有办法，但是不能直接使用交集指令）。
    同时操作多个key,则不能使用Redis事务.
    分区使用的粒度是key，不能使用一个非常长的排序key存储一个数据集。
    当使用分区的时候，数据处理会非常复杂，例如为了备份你必须从不同的Redis实例和主机同时收集RDB / AOF文件。
    分区时动态扩容或缩容可能非常复杂。Redis集群在运行时增加或者删除Redis节点，能做到最大程度对用户透明地数据再平衡，
    但其他一些客户端分区或者代理分区方法则不支持这种特性。然而，有一种预分片的技术也可以较好的解决这个问题。

** Mybatis
** Zookeeper
** HTTP，TCPIP
** 公司要求
   1. 要稳定
      稳定是因为不想做个1，2年就被迫的找工作
   2. 少加班
      时间要用来研究股票
   3. 同事不能太死逼
      这个肯能比较奢望，但是最好找事少的公司
** 面试复习计划

*** 2月18日
    不对，应该好好整理下项目，回忆一下，然后想想如何描述，会遇到哪些问题，如何搪塞过去
    Spring面试题，数据库面试题
*** 2月19日
    写英文简历
    可能问道的面试题，用英文先写下来，然后用口语说出来，网上找个可能的面试公司模拟一下。
*** 2月20日

** 让人有成就感的事情
   找一个能让自己获得快乐和成就感的事情，这样就能成为一个快乐的人。
   成为股神虽然很牛逼，但是能得到什么了？亏钱的悲伤痛苦没人分担，赚钱了也不会感到快乐，也没人分享。
   隆利科技和捷昌驱动肯定是有我买入的逻辑陷进的，不然不会这样被搞。

   捷昌驱动的一个失误点是不够耐心等待短期调整的低点买入，故亏损出局。
   但是隆利科技的问题更大，一买就进入一个血坑，我草。现在想到的最大的问题是图形上的球确定性，
   我在
   买入逻辑有非常大的问题，根本不应该在震荡中买入，既然你都知道：不涨就卖出或者说前面是上涨，开始震荡了，也即
   原来是上涨的，现在不涨了，就应该卖出，那么这是就是震荡啊，震荡就不该介入啊。草。
   发现貌似和春节那段时间的不思考，不勤练习看盘有关，很多恶习一下车就都出来了。


   调整是大盘最先调整完成企稳的，其次才是板块，最后才是个股，但是见顶却是个股最先见顶，因为需要出货。
   熊市下跌的话，也是个股最先见底，但是必须要等到大盘走好，至少是有阶段反弹才能出货的，所以
   个股的拉升也必须是要大盘先走好，这个是必须的。

   今天交易又有一个很大的问题，为什么没有介入东方通信和风范股份？既然风范股份能涨停，那东方通信没理由不涨停？
   我还在等着调整，思维是不对的，假设不调整了？现在大盘在上涨，你却等着调整，是不是不对？
   势才说明一切，那个昨日涨停和封板之类的为辅助。

   水平还是差很多，目前的方案就是找工作+交易。
   交易为主，工作为辅。

** 问题
   现在最本质，最关键的问题是什么？？？交易打通环节。
   先找工作再说，现在给自己的目标只有一个：通过工作和炒股，将房贷还清，将父母首付还清，OK。休息。

** 简历如何通过？这是个问题
