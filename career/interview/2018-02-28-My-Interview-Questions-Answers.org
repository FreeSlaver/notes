* 我遇到的笔试面试题答案
** 1.分布式事务如何解决，分布式锁如何实现？
   分布式事务的常见解决方式是：2阶段提交。
   分布式锁可以使用Redis或Zookeeper实现，使用Redis会有一些问题。
** 2.Kafka持久化如何实现的？
   Kafka通过顺序写日志来实现持久化（还需要更具体点）
** 3.Zookeeper选举原理，如果是3台，5台，7台是如何选举的?

** 4.memcached和redis等缓存区别，使用那些数据结构，支持那些key?
   memcache不太熟悉，区别还是可以说说的，。。。
   Redis的数据结构有String，List，Hash，Set，ZSet，后面好像海鸥个什么Bit arrays和HyperLogLogs。
   Redis支持哪些Key？你说的是Key的数据类型吗？在使用当中好像都可以，不过都是序列化成二进制的byte数组。
** 5.redis，kafka等是如何集群通信的

** 6.redis的持久化如何实现
   Redis的持久化实现有2种方式，一种是RDB，一种是AOF。
   RDB是定时全局快照，使用fork子进程，然后原进程，文件继续服务，等到新文件创建并同步到最新状态，就替换掉。
   AOF是异步添加日志，类似mysql的binlog。
** 7.画出一个应对分布式高并发的架构设计图

** 8.NIO和BIO区别，AIO是什么

** 9.Netty线程模型，零拷贝实现机制

** 10.concurrent包下有那些经常使用的类，能大概说说有些什么方法，如何实现的

** 11.Lock和condition如何使用

** 12.什么是死锁，如何解决死锁
   死锁就是对应的资源在可用阶段，无法被其他的访问者使用，也就是锁对应的资源一直得不到释放。
   比如用Redis中的某个Key，设置对应到某个资源，但是Key没设置Expire时间，设置Key后，Redis挂了，这样锁
   就随着这个Redis服务一直不可用，对应的资源无法访问，死锁了。

   解决死锁就是要保证：任何时刻，资源访问者有一个至少能获取到锁，也就是锁的活性保证。
   解决死锁就是要保证锁的持有者在CRUSH的时候能够释放掉，因为锁是访问的客户端设置的，资源使用完后，由客户端释放，
   避免死锁就是要让锁能够在CRUSH的时候也能释放，因此要将锁的释放交到另外的机制，比如设置EXPIRE时间。
** 13.多线程，高并发编程有哪些好的习惯

** 14.Mysql或者Oracle的数据库优化

** 15.说说Mysql存储引擎以及他们之间的区别

** 16.负载均衡都有那些技术，那些算法

** 17.缓存数据一致性如何解决，分布式缓存了？
   缓存数据一致性，就是说：在使用缓存的过程中，不要读到脏数据。
   我们怎样使用缓存的了？比如拿Redis和Mysql举例，我们使用Redis作为缓存，Mysql作为持久层。
   写操作，直接写Mysql，然后发送一个指令将Redis中对应数据删除，也就是失效掉，客户端在请求时，发现缓存中没有，
   就会去Mysql中读取并将数据载入到缓存Redis中。这样就保证了数据的一致性。
   也就是说：对原始数据进行更新后，如何刷新或者失效掉缓存中的对应数据。

   还有就是客户端的缓存一致性，比如像ZK，客户端有可能缓存ZNode的data副本，这时解决一致性是通过Watch
   这种通知机制来失效本地缓存，保证一致性的。

   分布式缓存，也就是缓存分布在多台机器上，这里分几种情况，我们还是拿Redis集群举例：
   第一种：每台机器上的缓存都不一样，比如用一致性Hash分布的结果，如果某一节点挂掉，
   客户端在请求时，发现缓存没了，就会从Mysql中读取，写入缓存，这时缓存就会进行转移，没有冲突。

   第二种：某些机器上缓存了相同的内容，比如一主两从，这时要保证这3台机器上的缓存要是一致的，不会出现一个Key
   出现多个Value。这时，写操作只通过Master，然后同步到2个Slaver，以Master为准。读的话，因为性能考虑，都是
   异步同步的，所以有可能读到脏数据，这时就要从设计层面做取舍。
   如果Master挂了，这时就要从2个Slaver中选取一个作为Master，当然是根据谁的增ID大，谁做Master、


** 18.JMS规范是什么，使用过那些消息中间件，他们的区别是什么
   使用过ActiveMQ，Kafka，Redis等。
