* 如何学习编程
** 草稿
   我喜欢把事情做到最好，而不是对原来的东西修修补补。

   如果你说“我要先学习一下再开始做”那么你永远不会真正开始。每个人都需要从某个地方开始，所以现在打开你的编辑器开始写代码吧

   *当你真正需要时再去学习*

   找一些相关的论文去理解算法并动手编程实践
   如果没有现成的函数库（其他程序员提供的可重用代码），你用自己喜欢的编程语言来实现它。

   *更快地完成自己的作品并且能够看到成果，才是激励你编程的源动力。*

   学习使用IRC

   多交朋友
   编写一个下载youtube视频的小程序也是很有用的

   一定要动手，例子不管多么简单，建议至少自己手敲一遍看看是否理解了里头的细枝末节。
   一定要学会思考，思考为什么要这样，而不是那样。还要举一反三地思考。
   我个人认为以后的趋势是前端是Web+移动，后端是Linux+开源

    如果你开始 5 分钟内不能写程式，那学习法就是不对的。
    学习的最好方法是从小的成功逐步扩大到大成功，所以能够最快捷地获得 feedback 是最重要的。

    你必须尽快写成第一个网页或程式，然后你可以改变它看看效果怎样。 想做某个功能时就查看 manual。 就这样你便会从实验和尝试中明白编程原理。

    *所有知识都是有关联的，追寻着关联的路径学习产生的效果普遍情况下是最大的。*

    如果你要开发某样东西，或者做某种用途（比如科学计算），都需要某个知识点进行切入，
    从哪里都好，切入某个知识点，然后用关联的方式扩充。如果在过程中见到新的不懂的名次，
    要么马上去“扩充”，要么就记下来，留待以后“点亮”这个天赋，总有一天这些dots......

    以上是学习编程要要知道的第一点，这个领域的知识是怎么组织的

    计算机科学基本上是由数学和机械类学科衍生而来，最大的特征就是两道门槛：能不能做出来、这个方法（算法或者设计）效率有多高。

    每个周期都发布（生产出）有效的可用的产品
    随着知识的增加，智力和经验会随之提高，学习成本也会降低，越来越容易学习。


    到这里，至上而下地给出学习建议：
    先有一个想法，像学钢琴也有一开始想弹奏的曲子，提出一个想用生产出来的产品，或者买一本评价好的入门书，
    做出书中提出的“产品”为目标将这个目标细化，可以找专业人士帮忙，梳理出知识的“切入点”以及周围的“关联点”，
    然后开始计划第一次迭代（做出第一样东西），可以是一段很短的程序或者一个作品，但必须有具体的产出每次产出后都重新调整计划，
    重要的是自己或者专业人士要能具体地评估这次产出的价值。如果是跟着书就自然容易了，就是跟书上对一下就是了如果要具体给到一个切入点，

    那么我的建议是两个选择：
    从C语言开始，然后学习算法，走科班路线
    从网页制作开始，然后学习网站工程，走产品路线，这是产品中最好入门的了

    *不必太担心学错，因为到达工程级别，你学过的八成知识都不会被作为工具使用，而它们的只是实现了它们的历史使命——成为你现有某个实用知识的中间点/桥梁、为你现在的学习效率做了一次铺垫。*

    所以要真解决了学习范围的问题后，你下一个问题应该是“要实现**应该具备那些知识”一类的了。等你在某个点扎根后，想的就是利用这个学习能力，去另一个自己更喜欢的领域，还是就此为据点扩充范围，亦或者深入这个领域（也是扩充的一种吧，方向不同）。

    最后重申的一点，就是软件开发本身就是一个学习的过程，只是产出的代码具备不同的价值而已。

    两个角色间的知识必定关联和有交集
    而至此，形成的一个结果就是，没有人能掌握所有知识；
    以上是学习编程要要知道的第一点，这个领域的知识是怎么组织的

    没有方向和目标，没人引导。
    主要有三个错误，方向不对，方法不对，环境不对。
    *编程除了做项目，没有第二种学习方法*

    学必须通过一行行代码，亲自痛苦的解决一个个bug，这样才能形成有效的反馈。单单的看书、看视频是没有任何鸟用的。

    学习里的教育向来都不是项目驱动制的，而是填鸭式的，东西都是老师讲了你才会，向来缺乏主动探索能力。但很不幸的是，好奇心和探索精神才是成功的主要因素

** 石破天惊
   现在我终于知道了，找到了，学习的方法了：
   1.learn by doing，实践中去学习
   2.以现在已经掌握的知识为根据地，革命据点，向外扩张。

   我之前遇到的问题就是：
   每次都想补习基础，然后开始拿一本书看，然后想自己实现http，ftp协议等等。
   发现看书看到最后都不了了之，学http，ftp实现起来，发现最后搞到要先学习如何抓包。
   要去学习tcp/ip协议，然后搞到一头雾水，最后不了了之。

   所以现在给自己的问题就是：
   1.先分析，总结下自己目前掌握的知识点有哪些
   Spring，Kafka，Redis，Mybatis，Mysql。

   2.以这些目前已有的知识点为革命根据地，核心据点，开始向外扩展。

   3.在知识扩展的同时，动手写代码，解决问题。

   4.这样做的结果
   一方面，面试时候，使用的技术都能说精通，第二方面，也不会像现在这样有这么大的挫败感。

   5.学习的最终目的是：提高你的理解能力，学习能力和心智水平，而不是死记硬背下一堆
永远不会再用到的“知识”。知识不被使用就毫无价值，当然对考试和面试还是大大的好处的。

** 要点

** 参考资料和扩展阅读
