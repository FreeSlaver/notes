* 重构改善既有代码的设计 笔记
** 序与前言
   重构你的人生，重构你的生活，重构不仅仅是一种代码技术，
   重构更是一种思想。

   定义：重构是在不改变软件可观察行为的前提下改善其内部结构。

   软件自有其美感所在。软件工程希望建立完美的需求与设计，但这是不现实的。
   因为软件是不断变化的，就像这个世界。

   按照既有的规范编写标准划一的代码，这是结构的美；
   快递迭代和RAD颠覆“全知全能”的神话，用近乎刀劈斧砍的方式解决问题，
   在混沌的循环往复中实现需求，这是解构的美。

   在设计前期使用模式常常导致过度工程，而“实用”是软件压倒一切的要素。

   当他们精炼自己的类继承体系时，当他们叫喊自己可以拿掉多少多少行代码时，
   重构的概念慢慢浮出水面。

   代码被阅读和被修改的次数远远多于它被编写的次数，保持代码的易读，易修改是关键。

   项目要交付给客户的，是可以有效运行的代码，不是用以取悦学究的完美东西。

   最重要的一件就是坚持以持续不断的重构行为来整理代码。

   软件项目之所以失败，是因为当系统烂到一定程度，到达临界点之后，所有的后续功能
   都无法再添加，老功能也无法再修改。

   人们不断修改代码，整体结构却逐渐衰弱。

   第二章重构的一般性原则，定义，以及进行重构的原因。

   测试在重构中扮演者非常重要的角色。

** 第一章
   实例之所以可以拯救我于太虚之中，因为它让我看见事情真在进行。

   编译器才不在乎代码好不好看呢。但是当我们打算修改系统的时候，就涉及到了人，而人在乎这些。

   我们的用户希望对系统做一点修改，不断引入变化。当你后续还要再修改时，复制粘贴的问题就浮现出来。
   因为需要保证后续对其中一处的修改在两处都要保持一致。

   我们得为即将修改的代码建立一组可靠的测试环境。

   这些测试都能够自我检验。是的，你必须让测试有能力自我检验，否则旧的耗费大把时间来回比对，
   这会降低你的开发速度。

   代码块越小，代码的功能就越容易管理，代码的处理和移动也就越轻松。

   如何把长长的函数切开，并把较小块的代码移至更合适的类。

   我经常犯这种愚蠢可笑的错误，而这种错误旺旺很难发现。
   但是如果我的修改很小，而且有很好的测试，那么问题就很容易发现。

   更改变量名称是指的的行为吗？绝对值得。好的代码应该清楚表达出自己的功能，变量名称是代码清晰的关键。

   代码应该表现自己的目的（自描述方面之一），这一点非常重要。阅读代码的时候，我经常进行重构。
   这样随着对程序的理解逐渐加深，我也就不断地把这些理解嵌入代码中，这么一来才不会遗忘我曾经理解的东西。

   函数应该放在它所使用的数据的所属对象内。

   有时候我会保留旧函数，让他调用新函数。如果旧函数是一个public函数，而我又不想修改其他类的接口，
   这便是一种有用的方法。因为引用了public函数的地方很多，所以尽量使用更小访问权限的修饰符。

   我喜欢尽量除去这一类临时变量。临时变量往往引发问题，它们会导致大量参数被传来传去。

   性能，重构时你不必担心这些，优化时你才需要担心它们。

   如果没有这些查询函数，其他函数必须要了解Rental类，并自行建立循环。
   在一个复杂系统中，浙江使程序的编写难度和维护难度大大增加。
   因为这个暴露了太多细节，也就是太多复杂度了。

   重构动作可以清除这些重复代码。

   最后不要在另一个对象得属性基础上运用switch语句。如果不得不使用，也应该在对象自己的数据上使用。

   计算费用时需要两项数据：租期长度和影片类型。为什么我选择将租期长度传给
