* 添加Zipkin Brave对Netty的支持
** 思路
   好久没搞netty了，一下就忘，妈的。
   我来搞的话，首先是一个handler，然后里面包装成那个brave的request，response，然后丢给brave处理。

   就是说BraveTracing可以产生3个类，一个是对inbound的httpRequest进行拦截，一个是对outbound的httpResponse
进行拦截，还有一个是异常处理。关键还有个问题是client的处理，现在都是server端。



蛋疼的很，我还需要写client和server端。
//ch.pipeline().addFirst(BraveTracing.create(brave).createHttpRequestHandler());

              //ch.pipeline().addLast(new SimpleChannelInboundHandler<FullHttpRequest>() {
              //  @Override
              //  protected void channelRead0(ChannelHandlerContext ctx,
              //      FullHttpRequest fullHttpRequest)
              //      throws Exception {
              //
              //    String httpUri = fullHttpRequest.uri();
              //    if ("/foo".equals(httpUri)) {
              //      ctx.writeAndFlush("bar");
              //    } else if ("/child".equals(httpUri)) {
              //      brave.localTracer().startNewSpan("child", "child");
              //      brave.localTracer().finishSpan();
              //      ctx.writeAndFlush("happy");
              //    } else if ("/disconnect".equals(httpUri)) {
              //      throw new Exception();
              //    }
              //  }
              //});

这个地方是直接从request中getHeader(header)，但是Netty中，
是request.get()

测试用例每次都很难，我R。
首先我这个地方必须用线程，启动server，不然
这个地方就是init的时候，需要先stop释放端口。

这个createChildSpan真心不好搞。需要在里面然后，handler重新搞一个span。

** 答应别人的事情要干完，不要轻易许诺
   首先来看下，新的api，servelet中是怎么实现的。

   现在的学习方法是以目标驱动，然后直接，简单，暴力。只需要了解哪些必须要了解的。

   反思我之前的行动，就是什么东西，都做到一半，浪费了多少时间，精力啊。

   要好好看看这个mockserver是做什么的。

   刚才在搞那个Netty的测试时候，就是发现其实问题的本子很简单，我在new Thread(xx).start()后，
   netty的服务器并没有马上建立好，而这个时候http request已经发出去了，就会造成超时。

   child和reportsClientAddress_XForwardedFor没通过

** 源码领会
*** Tracer

   这个地方一定要完成，不能半途而废。
   'brave.Span' is already in use

   Your test may have some bugs as i can passed

   reportsClientAddress 没通过啊
   sampling也没通过

   supportsPortableCustomization没通过，地址被占用

   addsErrorTagOnException也没通过


   badRequest通过。
   reportsSpanOnException_async 是干嘛的？
   现在估计就两个init重复()的没法通过


   reportsClientAddress为什么不行？

不行的：
sampleDisable
supportsPortableCustomization
上面2个都是重复init（）
reportClientAddress

   问题在这个handler的初始化上，或者httpTracing上，无法替换。

   将2个测试通过，提交PR，哈哈哈。
   首先会调用setup，第一次生成httpTracing，然后调用 ITNettyTracing中的init()方法，
   init方法中initializer初始化好了，server也初始化好了，然后start了

   再重新初始化httpTracing，再重新init一次。
    //p.addLast("exception", new ExceptionHandler());//Make sure this is the last line when init the pipeline.

    首先好好想想，这个windows oraclejdk8本地跑起来是没问题的。
    但是放到cicurs上面，是ubantu openjdk8，然后就报错了。refused

*** 今日任务
    搞定这个pr，然后全力学习基础知识。

    现在来好好想想怎么搞？妈的，之前的那个好像冲突了，我R。

*** 好好想想
    妈的，本地测试是好的，放上去之后，也是好的。但是没有将。
    不行，这个地方还是要将那个加上去。

*** Netty Circle等的bug
    通过自己的测试来看的话，不算openjdk的缘故。因为我本地使用了openjdk来测试过了，一样可以通过。
    所以问题就在circule上面的问题了，出了这个，还有一个另外的工具。我再去试试。

    今天一点要搞定这个问题，你麻痹的。

** 根据别人意见修改
   1.netty的version是特定的吗？

   2.改到readme中的例子，使用最简单的来搞。

   3.rename to NettyHttpTracing (because netty handles lots of other protocols)

   4.rename method to channelInboundHandler?createHttpRequestHandler
   rename method to channelOutboundHandler? createHttpResponseHandler


   5.rename tobrave-instrumentation-netty-http. Reason being that many codecs are supported and this impacts packages
   make the java package name also brave.netty.http (leaving for other codecs in the future)
   改掉项目名称，加个package名字，表明是http的，

   6.add quick type-level javadoc on what this is.
   ps Snoopy was a joke, like Charlie Brown :P
   Maybe TestHttpServer?
   我将另外想个名字。

   7.HttpSnoopyServerHandler改成TestHandler，not public。

   8.move this to the netty instrumentation pom将那个pom.xml的移动到instrumentation 的pom中

   先来想想名字，或者netty中用于测试用例的。
   我草，不用想名字了，搞那个测试用例。首先要大概明白，一个测试用例做了什么，
   然后看那个EmbeddedChannel的源码。



   好好看看HttpRequestDecoderTest这个类，里面的testMultiLineHeader方法。

   先包装一个EmbeddedChannel，然后瓶装一个request。然后写到这个channel里面去。

   HttpRequestEncoderTest这个类针对各种url请求测试，游泳啊。


   我现在要做的就是将这个HttpRequestDecoder等都传递进去？

  我这边其实是相当于构造了一个server服务器，然后接受测试用例发过来的Http请求，
  然后处理（这个地方应该用Embedded写回就可以了），所以最好不要这个handler。只是对各种请求响应。

  但是构建Embedded，需要将这些东西都传递进去啊。

  curl -H "Content-Type: application/json" -X POST -d @maxwell-sink.json http://localhost:8083/connectors

  curl -GET http://localhost:8083/connectors/test/status

  curl -X "DELETE" http://localhost:8083/connectors/test

  我来测试下，到底是因为-符号，还是因为只能放在lib里面，
  还是必须要export class path
  *为毛，返回的都是127.0.0.1？？？*

  刚开始想要的是：一点点的上量，然后topic消费完了，就过去了，怎么让它们能够不断的上。
  然后从头开始消费？？？其实这里是可以的，加个忽略列表，然后将offset设置到开头。

  这个地方和我使用线程有关系，就是那个server继承Thread有关系。
  但是如果不继承的话，又会被卡主。

  但是为什么会测试用例还没跑完，另外来一个就启动了了？然后抛端口被占用异常？
  那么肯定是我这里shutdown的有关系。
