* Unix编程艺术
** Intro
   capture the engineering wisdom and philosophy of the Unix community as it's applied today — not merely as it has been written down in the past, but as a living "special transmission, outside the scriptures" passed from guru to guru.


   一个人若想有所成就，必须先树立其信仰，信念，精神，理念，并浸染于相应的文化之中。
   即使此时无一技之长，日后也必定有所成就。

** Philosophy
*** Culture
    Every branch of engineering and design has technical cultures. In most kinds of engineering, the unwritten traditions of the field
    are parts of a working practitioner's education as important as (and, as experience grows, often more important than)
    the official handbooks and textbooks. Senior engineers develop huge bodies of implicit knowledge, which they pass to their juniors
    by (as Zen Buddhists put it) “a special transmission, outside the scriptures”.
    任何一个工程学和设计学的分支都有技术文化。在很多的工程学领域，没有写下的传统是从业者教育的一部分。（并且，随着经验增长，这部分
    比官方的手册或文档更加的重要。）高级工程师开发了大量的含蓄式的身体语言，并将它们传递给中集工程师（正如禅宗佛教徒所说的）。
    一种经文之外特殊的传递方式。

    A very few software technologies have proved durable enough to evolve strong technical cultures, distinctive arts,
    and an associated design philosophy transmitted across generations of engineers.
    就是要学习这种东西，成为一代宗师。

*** Basic Philosophy
    Rule 1. You can't tell where a program is going to spend its time. Bottlenecks occur in surprising places, so don't try to second guess and put in a speed hack until you've proven that's where the bottleneck is.
    Rule 2. Measure. Don't tune for speed until you've measured, and even then don't unless one part of the code overwhelms the rest.
    Rule 3. Fancy algorithms are slow when n is small, and n is usually small. Fancy algorithms have big constants. Until you know that n is frequently going to be big, don't get fancy. (Even if n does get big, use Rule 2 first.)
    Rule 4. Fancy algorithms are buggier than simple ones, and they're much harder to implement. Use simple algorithms as well as simple data structures.
    Rule 5. Data dominates. If you've chosen the right data structures and organized things well, the algorithms will almost always be self-evident. Data structures, not algorithms, are central to programming.[9]
    Rule 6. There is no Rule 6.

    When in doubt, use brute force
*** More Philosophy
    Rule of Modularity: Write simple parts connected by clean interfaces.

    Rule of Clarity: Clarity is better than cleverness.

    Rule of Composition: Design programs to be connected to other programs.

    Rule of Separation: Separate policy from mechanism; separate interfaces from engines.

    Rule of Simplicity: Design for simplicity; add complexity only where you must.

    Rule of Parsimony: Write a big program only when it is clear by demonstration that nothing else will do.

    Rule of Transparency: Design for visibility to make inspection and debugging easier.

    Rule of Robustness: Robustness is the child of transparency and simplicity.

    Rule of Representation: Fold knowledge into data so program logic can be stupid and robust.

    Rule of Least Surprise: In interface design, always do the least surprising thing.

    Rule of Silence: When a program has nothing surprising to say, it should say nothing.

    Rule of Repair: When you must fail, fail noisily and as soon as possible.

    Rule of Economy: Programmer time is expensive; conserve it in preference to machine time.

    Rule of Generation: Avoid hand-hacking; write programs to write programs when you can.

    Rule of Optimization: Prototype before polishing. Get it working before you optimize it.

    Rule of Diversity: Distrust all claims for “one true way”.

    Rule of Extensibility: Design for the future, because it will be here sooner than you think.

    Controlling complexity is the essence of computer programming.
    控制复杂性是计算机程序的精髓。
    Debugging dominates development time
    测试占了开发时间的主导地位。
    The only way to write complex software that won't fall on its face is to hold its global complexity down — to build it out of simple parts connected by well-defined interfaces.

    To make programs composable, make them independent. A program on one end of a text stream should care as little as possible about the program on the other end.
    It should be made easy to replace one end with a completely different implementation without disturbing the other.
    为了程序的可组合型，要让它们独立。在一个文本流一端的程序应该尽量少的考虑在温流另外一端的程序。
    而且可以在另一段很好的，完全的用另外的实现替换掉，而不会打扰到文本流另一端的程序。

    Software is said to be robust when it performs well under unexpected conditions which stress the designer's assumptions, as well as under normal conditions.

    One very important tactic for being robust under odd inputs is to avoid having special cases in your code.

    the easiest programs to use are those that most effectively connect to the user's pre-existing knowledge
    最简单的程序是哪些能高效连接到用户已有的知识的程序。

    Pay attention to your expected audience. What is least surprising can differ among these groups.

    Pay attention to tradition.These traditions exist for a good reason: to tame the learning curve. Learn and use them.
    注意传统。这些传统的存在有很好的原因：为了驯服学习曲线。学习并使用它们。

    The flip side of the Rule of Least Surprise is to avoid making things superficially similar but really a little bit different.
    This is extremely treacherous because the seeming familiarity raises false expectations.
    It's often better to make things distinctly different than to make them almost the same.
    我草，这句话屌炸天。最小惊讶原则的反面就是避免设计出的事物非常一般，但是确实要有一点不同。
    这很奸诈，因为看起来相同提高了错误的期待。更好的方式是使得事物与众不同，而不是一样。

    E-mail allowed ideas to move rapidly among the group so that issues could be resolved as quickly as necessary

    Software updates could be distributed in a matter of hours, enabling every site to act in a concerted manner during development. The net changed the way software could be developed.

    cooperative multitasking 合作式
    a process has to voluntarily give up its hold on the processor before the next one can run (thus, simple programming errors can readily freeze the machine).
    preemptive multitasking 抢占式
    in which timeslices are allocated by a scheduler which routinely interrupts or pre-empts the running process in order to hand control to the next one

    A subtle but important property of pipes and the other classic Unix IPC methods is that
    they require communication between programs to be held down to a level of simplicity that encourages separation of function
    pips和其他经典的Unix IPC（Interprosses communication）进程间通行是一个精妙但是非常重要的特性。
    为了进程间通信，他们需要将复杂度降低到一定的简洁程度，以鼓励函数级别的分离（也就是程序设计要到最小的可切割力度以达到复用）

    every time another is added to the set, the complexity of this solution rises as the square of the number of cooperating programs.
    Worse than that, any change in one of the exposed data structures can induce subtle bugs in an arbitrarily large number of other programs.
    每次当一个新方法添加到工具箱中，解决方案的复杂度就会巨大上升。
    比这更糟糕的是，任何在一个暴露的数据结构中的改变都会产生微妙的bugs，在其他的大量的程序中。

    Mac programmers tend to design in the opposite direction from Unix programmers;
    that is, they work from the interface inward, rather than from the engine outward
    Mac的程序员们使用和Unix程序员们完全相反的设计方向。
    他们从用户界面向内部工作，而不是从引擎而外工作。（说的他妈太对了，因为Mac注重的是用户体验，
    这样必然造成他们先设计出用户界面（我们看到的），然后来实现这些界面功能。）
    而不是因为我需要某一个功能，然后我从功能开始向外开始设计，实现。
    Mac面向的是用户体验的功能，而Unix是面向的实质功能。

** C4 Modularity
   One direction is bottom-up, from concrete to abstract —
   working up from the specific operations in the problem domain that you know you will need to perform.

   The other direction is top-down, abstract to concrete —
   from the highest-level specification describing the project as a whole, or the application logic,
   downwards to individual operations.

** C5 Texual
   读到case study了。
** C6 Transparently
   Beauty is more important in computing than anywhere else in technology because software is so complicated. Beauty is the ultimate defense against complexity.

   Software systems are transparent when they don't have murky corners or hidden depths.
   软件系统有透明性，当他们没有黑暗的角落或隐藏的深渊

   Transparent is good because you can see through the machinery to what is actually going on
   很类似背透的机械手表，你可以看到它里面正在运行的一切。

   Software systems are discoverable when they include features that are designed to help you build in your mind a correct mental model of what they do and how they work.
   这句话的大概意思我想是：软件系统的可探索性在于它们有特性，能帮助你的心灵构建一种正确的心智模式。
   也就是说，软件的设计，使得后续的人们去扩展非常的容易！

   UI的本质是展现实质，实现功能。UI的transparency就是说没有阻挡实质功能传达给用户的路径。
   这种软件设计，很像从软件核心里面射向用户的一束光，让用户使用工具软件，直达他想要的功能。


   KDE软件公司，www.kde.org
   我草，发明了好多我在用，我却不知道。

   fuck

** Recommed Books
   The Unix Philosophy
   The Pragmatic Programmer
   The Practice of Programming
   Zen Flesh
   Zen Bones
   The Art of Computer Programming
   Design Patterns: Elements of Reusable Object-Oriented Software
   A Pattern Language ***建筑学方面的书
   The Timeless Way of Building 同上，设计和建筑的
   Heroes of the Computer Revolution
   New Hacker's Dictionary
   The Innovator's Dilemma
   Design Rule
   The Pragmatic Programmer
   The Discipline and Method Architecture for Reusable Libraries
   The Elements of Networking Style
