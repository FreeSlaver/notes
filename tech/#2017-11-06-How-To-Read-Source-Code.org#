* 如何阅读源码
**  像读一本书一样阅读源码，
**  像解决一个庞大而复杂的问题一样的，阅读源码，
    一份开源代码本身就是非常庞大而复杂的，因为它要解决一个庞大而复杂的问题。
    要像阅读的话，核心的思想就是--分解问题。

    将整体分割成几部分，然后每部分分解成章，然后成为一个个小节。
    挑选重要的看。
**  像分析，解决问题一样的，阅读源码
    也就是在你使用这个开源软件，依赖包的时候遇到了什么问题，
    或者不知道如何使用，那么就直接读相关的几个类的注释就行了。


** 从入口
   从入口或者例子使用到的类看起。
   *用idea打开类之后，不要立马去读注释和源码。而应该切到方法视图，看类中有哪些方法，属性。*

   整个来说：
   项目->按功能切成几块->找感兴趣的，或者例子相关类切入->看类中的方法，属性等
   ->看重要的方法，属性，也就是自己感到困惑的->最后通读一遍。

   读完之后，开始撸起袖子，开干。

   有了例子之后，按照例子的代码，顺着一个功能需求，一个思路去一行行的读
   例子相关的代码。

   然后我们看ftp还能实现那些功能，比如增删改查，长时间空闲连接等等。
   你可以去xftp这个软件的界面上，这些界面上的功能，就是软件实现功能的实质。

   比如匿名登录，加密等等。
   这样看源代码学习，不仅掌握了如何使用这些开源软件，依赖包的API，
   并且也知道了实现的原理和交互的机制，虽然还有一些细节没有完全掌握，
   但是那些没用到的东西，掌握了又有什么用呢？

   因为我们最终的目的是要撸出代码出来的。看书有什么用了？特别是国产书籍，
   除了应付考试，死记硬背一些概念。

   我们在看源代码的同时，还要学习别人是如何 *组织* 属性，方法，类，包等等。
   关于注释，如果有不懂的，就看注释，懂了就不用看，毕竟代码只有几行，注释有几十行。


   *终于算是找到了快速看源代码的方法了。*
   后续继续练习，看看还有没撒问题，然后改进方法。

   首先摆出我的观点：多读代码，多写代码，甚至连书都要少看。
   只有在看不懂代码细节的时候，比如什么Active connection之类的，就需要看书了。

** 多读代码
   多读代码，掌握学习的精髓，从代码中学习，遇到不懂的google。

   我发现在读代码的过程当中，最主要就是 *思考别人的思考方式，而且很多规范等都值得学习*
   很明显的比我的好，就能直接拿来使用。
   多思考，多学习。

   先对参数进行校验，再来考虑特殊情况，
   public Key floor(Key key) {
        if (key == null) throw new IllegalArgumentException("argument to floor() is null");//中文就是：floor方法的参数为空，如果有多个floor参数，
        //如floor(Key key,Value val,String xx),这时如果其中的有一个参数为空，怎么弄？将所有参数都打印出来？
        1. 违反数据安全性，可能打印出一些隐私信息；2. 信息过多，本来我只是想知道那个参数缺乏，所以最好的方式是floor方法的参数key，xx为空,：直接指出那个参数为空，f
        return null;
   }
   argument to floor() is null，你看人家抛异常的时候会指明方法名，

** 多写代码
