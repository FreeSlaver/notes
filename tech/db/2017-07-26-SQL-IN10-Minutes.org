* SQL必知必会
  每当你从电子邮件地址簿里查找名字时，就是在使用数据库。你在网站上进行搜索，也是
在使用数据库。你在工作中登录网络，也需要依靠数据库验证用户名和密码。即使是在自动取款机上使用ATM卡，也要利用数据库进行密码验
证和查询余额
1.1 数据库基础
数据库（database）
保存有组织的数据的容器（通常是一个文件或一组文件）。
最简单的办法是将数据库想象为一个文件柜。这个文件柜是一个存放数据的物理位置，

数据库软件应称为数据库管理系统（即DBMS）。
数据库是通过DBMS创建和操纵的容器。

表（table）
某种特定类型数据的结构化清单。
同一种业务类型的数据放在一张表，比如学生，老师分别对应一张表。

模式（schema）
关于数据库和表的布局及特性的信息。
表具有一些特性，这些特性定义了数据在表中如何存储，包含存储什么样的数据，数据如何分解，各部分信息如何命名等信息。描述表的这组
信息就是所谓的模式（schema），模式可以用来描述数据库中特定的表，也可以用来描述整个数据库（和其中表的关系）。

列（column）
一个列对应表中的一个字段。所有表都是由一个或多个列组成的。
理解列的最好办法是将数据库表想象为一个网格，就像个电子表格那样。网格中每一列存储着某种特定的信息。

分解数据
正确地将数据分解为多个列极为重要
通过分解这些数据，才有可能利用特定的列对数据进行分类和过滤
你可以根据自己的具体需求来决定把数据分解到何种程度。例如，一般可以把门牌号和街道名一起存储在地址里。这没有问题，除非你哪天
想用街道名来排序，这时，最好将门牌号和街道名分开。

数据类型
所允许的数据的类型。每个表列都有相应的数据类型，它限制（或允许）该列中存储的数据。
数据库中每个列都有相应的数据类型。数据类型（datatype）定义了列可以存储哪些数据种类。
数据类型还帮助正确地分类数据，并在优化磁盘使用方面起重要的作用。因此，在创建表时必须特别关注所用的数据类型。

行（row）
表中的一个记录
表中的数据是按行存储的，所保存的每个记录存储在自己的行内。

主键（primary key）
一列（或一组列），其值能够唯一标识表中每一行。
顾客表可以使用顾客编号，而订单表可以使用订单ID。雇员表可以使用雇员ID或雇员社会安全号。
没有主键，更新或删除表中特定行就极为困难，因为你不能保证操作只涉及相关的行。

任何列都可以做主键，但要满足以下条件：
任意两行都不具有相同的主键值；
每一行都必须具有一个主键值（主键列不允许NULL值）；
主键列中的值不允许修改或更新；
主键值不能重用（如果某行从表中删除，它的主键不能赋给以后的新行）。

1.2什么是SQL
SQL是结构化查询语言（Structured Query Language）的缩写

限制结果
SQL Server
SELECT TOP 5 prod_name
FROM Products;
DB2
SELECT prod_name
FROM Products
FETCH FIRST 5 ROWS ONLY;
Oracle
SELECT prod_name
FROM Products
WHERE ROWNUM <= 5;
用MySQL、MariaDB、PostgreSQL或者SQLite
SELECT prod_name
FROM Products
LIMIT 5;
返回从第5行起的5行数据：
SELECT prod_name
FROM Products
LIMIT 5 OFFSET 5;
也可以使用LIMIT 5,5，效果同上。


CNAME记录和MX记录有冲突，可能影响邮件的正常接收。
如果您遇到相关问题，建议将CNAME记录修改为A记录。

注释
行内注释
`--`
`#`  支持的较少
多行注释，和代码注释一样的
`/**/`

子句（clause）
SQL语句由子句构成，有些子句是必需的，有些则是可选的。
一个子句通常由一个关键字加上所提供的数据组成。
FROM tableXXX就是一个子句。

ORDER BY子句必须是SELECT语句最后一条子句。

多列排序
直接将列名用逗号分开即可。

DESC只对前面一个字段生效。

只检索所需数据需要指
定搜索条件（search criteria），搜索条件也称为过滤条件（filter condition）。

优化数据库后可以更快速有效地对数据进行过滤。而让客户端应用（或开发语言）处理数据库的工作将会极大地
影响应用的性能，并且使所创建的应用完全不具备可伸缩性。

使用BETWEEN进展范围值检索
SELECT prod_name, prod_price
FROM Products
WHERE prod_price BETWEEN 5 AND 10;

Null判断
SELECT prod_name
FROM Products
WHERE prod_price IS NULL;
不能使用=Null

操作符（operator）
用来联结或改变WHERE子句中的子句的关键字，也称为逻辑操作符（logical operator）

SELECT prod_name, prod_price
FROM Products
WHERE vend_id = 'DLL01' OR vend_id = ‘BRS01’
AND prod_price >= 10;
AND的求值优先级更高，所以会和vend_id='BRS01'组合起来。


为什么要使用IN操作符？其优点为：
在有很多合法选项时，IN操作符的语法更清楚，更直观。
在与其他AND和OR操作符组合使用IN时，求值顺序更容易管理。
IN操作符一般比一组OR操作符执行得更快（
IN的最大优点是可以包含其他SELECT语句，能够更动态地建立WHERE子句。

搜索模式（search pattern）
由字面值、通配符或两者组合构成的搜索条件。
LIKE指示DBMS，后跟的搜索模式利用通配符匹配而不是简单的相等匹配进行比较

在搜索串中，%表示任何字符出现任意次数
在确实需要使用通配符时，也尽量不要把它们用在搜索模式的开始处。把通配符置于开始处，搜索起来是最慢的

拼接（concatenate）
将值联结到一起（将一个值附加到另一个值）构成单个值。

RTRIM()去掉右边空格，类似的还有LTRIM，TRIM。

SQL支持列别名。别名（alias）是一个字段或值的替换名。别名用AS关键字赋予。


SQL语句省略了FROM子句后就是简单地访问和处理表达式，
例如SELECT 3 * 2;将返回6，SELECT Trim(' abc ');将返回abc，SELECT Now();使用Now()函数返回当前日期和时间。

8函数
SOUNDEX是一个将任何文本串转换为描述其语音表示的字母数字模式的算法。SOUNDEX考虑了类
似的发音字符和音节，使得能对字符串进行发音比较而不是字母比较。
SELECT cust_name, cust_contact
FROM Customers
WHERE SOUNDEX(cust_contact) = SOUNDEX('Michael Green')

9汇总
聚集函数（aggregate function） 对某些行（column）运行的函数

使用COUNT(*)对表中行的数目进行计数，不管表列中包含的是空值（NULL）还是非空值。
使用COUNT(column)对特定列中具有值的行进行计数，忽略NULL值。

如果要返回每个供应商提供的产品数目，
SELECT count(*) AS prod_num
FROM Product
Group By vend_id （放最后）
或者返回只提供一项产品的供应商的产品，
WHERE prod_num = 1;
或者返回提供10个以上产品的供应商的产品，
WHERE prod_num > 10

GoupBy

GROUP BY子句可以包含任意数目的列，因而可以对分组进行嵌套，更细致地进行数据分组。
如果在GROUP BY子句中嵌套了分组，数据将在最后指定的分组上进行汇总。换句话说，在建立分组时，指定的所有列都一起计算（所以
不能从个别的列取回数据）。
GROUP BY子句中列出的每一列都必须是检索列或有效的表达式（但不能是聚集函数）。如果在SELECT中使用表达式，则必须在GROUP
BY子句中指定相同的表达式。不能使用别名。
大多数SQL实现不允许GROUP BY列带有长度可变的数据类型（如文本或备注型字段）。
除聚集计算语句外，SELECT语句中的每一列都必须在GROUP BY子句中给出。
如果分组列中包含具有NULL值的行，则NULL将作为一个分组返回。如果列中有多行NULL值，它们将分为一组。
GROUP BY子句必须出现在WHERE子句之后，ORDER BY子句之前。

10.3 过滤分组
你可能想要列出至少有两个订单的所有顾
客。为此，必须基于完整的分组而不是个别的行进行过滤。
先分组，后过滤：
不能用WHERE，因为WHERE过滤指定的是行而不是分组。
所有类型的WHERE子句都可以用HAVING来替代。唯一的差别是，WHERE过滤行，而HAVING过滤分组。
这里有另一种理解方法，WHERE在数据分组前进行过滤，HAVING在数据分组后进行过滤。
SELECT cust_id,COUNT(*) AS orders
FROM t_order
HAVING COUNT(*) >=2;

先认真看书，然后找Github上的star多的项目，开始撸。
