* 微信红包设计
** 草稿
   这个是那天蚂蚁金服终面的技术问题，面试官直接就来：给我设计一个微信抢红包的架构设计。

   首先我们都知道春节的时候，大家都会在微信群里面抢红包，发红包，想想春节时候，几乎所有人都在这里使用，保守估计在线人数8亿，
   然后每个群的人数上限是500，一般一个人会有几个群，根据二八定力，80%的群只有20%的上限人数100个人，20%的群会有80%的人数400个人，
   一般一个人会有几个微信群了？估计在20个左右。

   上面是大概数据，然后我们来思考：发红包，抢红包整个的业务流程。
   发红包：用户U1在一个100人的微信群G中发了88块钱的20个普通（随机）红包。然后12小时后，红包返回给用户。发出红包的同时对用户扣款。
   红包属性 redPacket（这些东西先放后面？）
   {
   createTime:"2018-08-08 00:00:00",
   createUid:"SX12",
   redPacketId:"123456",//红包全局唯一id
   redPacketAmount:"88.00",
   redPacketNumber:20,
   redPacketType:"normal/random"
   }

   抢红包：微信群G中的用户U2,U3,U4。。。等开始抢红包了，
   （这里还设计到一个秒杀？但是只有500个人最多，所以还好）

   可以用广播，也可以用客户端拉取（这里肯定选拉取的方式？还是判断是否在线，在线直接广播，不在线拉取？）
   微信客户端肯定是用一个心跳长连接来维持和服务器的通信，然后也可以主动发心跳拉取最新信息（用户下拉），

   这里有个问题，如果群里面有用户不在线，如何保存历史信息了？所以逻辑是先判断用户是否在线，在线直接广播，不在线，丢到消息队列，然后用户自己拉取。（其实都会保存一份）
   服务器的主要压力在哪里？如果8亿级别的用户的话，任何一个点都有可能成为性能瓶颈。

   还有问题：微信群的组织形式，一个用户，多个群；一个群，多个用户，直接用userId和groupId做相互映射就行了（这个信息放redis）

   肯定是服务器端负责，按照随机还是普通来算出大概的金额，然后作为list返回给客户端，然后客户端一个个从list中取红包。
   性能的负载关键点：首先，肯定是在抢红包过后，将金额存到钱包的过程。客户端和服务端要强一致性。

   *我们首先来说原则：1.能延时处理的延时处理；2.能合并操作，批处理的合并后批处理；3.性能瓶颈在哪里，我们就用横向扩展来解决。*

   我刚观察了一下，红包信息页面是会随时，动态展示红包剩余个数和金额的。所以，这个金额的计算之类的应该在客户端进行并同步到服务器端。

   大概情况清楚了。 *要画一个流程图，要画一个架构图，*
   Redis的应用，客户端和服务端数据一致性保证，最终一致性，其实数据库的压力并不是非常大，因为操作的都是一条用户记录，如果有分布式事务之类的，可以将每次抢到红包都做一条数据库记录。
** 正文
   这个是蚂蚁金服最终技术面出的一道面试题，面试官直接就来：“给我设计一个微信抢红包的架构设计出来”，
   没有上下文，也没具体要问的细节问题，当场有点蒙蔽，而且感觉那天没有答好，回来好好思考了一番。

   思考之后，写这篇文章之前，Google了下，但是发现都写的很差，不是吹嘘如何牛逼，就是答不对题，没标注个重点。
   *我们先来说说解决性能瓶颈的几个原则：*
   1. 能延时处理的尽量延时处理；
   2. 能合并操作，批处理的合并后批处理；
   3. 性能瓶颈在哪里，我们就用横向扩展来解决；

   现在让我们来发红包吧：首先掏出你的手机，然后打开微信，发个红包，仔细考虑，观察整个过程中的展示信息，思考背后的流程。

   微信抢红包流程：
   用户张三在一个100人的春节拜年群中发了一个88块钱的20个拼手气（普通）红包，然后群中用户李四，王五，赵六等开始抢红包，
   每次红包点开，会显示抢到的金额，剩余红包个数/总个数，已经被抢的金额/总金额，其他用户抢到的金额。

**   大致流程图如下：

   红包属性如下：
   {
       createTime:"2018-08-08 00:00:00",
       createUid:"SX12",
       redPacketId:"123456",//红包全局唯一id
       redPacketAmount:"88.00",
       redPacketNumber:20,
       redPacketType:"normal/random"
   }
   后台处理流程如下：
*** 发红包：
     张三点击发红包，这时候可以选择从余额中扣，或者银行卡中扣，扣款成功后，服务端根据群GroupId查询出群成员，对在线的群成员，直接广播一条红包消息，
     不在线的，会先将红包信息存到消息队列中，上线后主动拉取，消费消息。
     这整个过程必须保证是同步的，也就是扣款成功之后，才会生成一个红包消息。会有一条数据库记录，并且考虑到群人数上限500人，会被多次抢，所以此红包记录应该被放入Redis。

*** 抢红包：
    很显然整个的流程中，抢红包时的访问和保存抢到的红包金额是瓶颈所在。
    因为每次点开红包，都会显示剩余红包个数和已被抢的金额，因此红包金额的计算肯定是在客户端，然后提交到服务器端，并更新用户的钱包余额。
   读：我们已经用Redis解决，
   写：因为主要是更新单个用户的单条记录，所以瓶颈应该不会很大，
   关键点在：微信客户端和服务器端的网络交互太多，我们来看看，应用以上的几个原则，是否能够优化。

**** 能否延时处理？
     因为每次点开红包，剩余红包个数，已抢金额都是最新数据，所以不能延时处理，但是我们可以 *让用户读Redis而不是直接读数据库。*

** 整体架构图如下：
   架构上，读，用Redis集群搞，
