* 大型网站技术架构读书笔记
  架构设计，快速开发，高效部署，业务监控，服务治理，运维管理
  核心技术：前端优化，CDN，反向代理，缓存，消息队列，分布式存储，分布式服务，NoSQL存储，搜索，监控，安全。

  演化，模式，要素
** 1. 架构演化
*** 1.1 大型网站特点
    1. 高并发，大流量
    2. 高可用
    3. 海量数据
    4. 用户分布广泛，网络情况复杂
    5. 安全环境恶劣
    6. 需求快速变更，发布频繁
    7. 渐进式发展
**** 1.2.2
     一台服务器分离：应用服务器，文件服务器，数据库服务器。
     应用服务器需要处理大量的业务逻辑，因此需要更快更强大的CPU；
     数据库服务器需要快速磁盘检索和书籍缓存，需要更快的硬盘和更大的内存；
     文件服务器需要存储大量用户上传的文件，需要更大的磁盘。
**** 1.2.3
     二八定理：80%的业务访问集中在20%的数据上。
     将这20%的数据缓存到内存中。
     缓存分：应用服务器本地缓存，如MySQL的缓存，Mybatis的缓存，应用程序的Map等缓存；
     远程分布式缓存服务器上的远程缓存，如Redis，Memcache集群缓存。
**** 1.2.4
     使用集群是网站解决高并发，海量数据问题的常用手段。
     通过负载均衡调度服务器，可将用户的请求分发到应用服务器集群的某台机器上。
**** 1.2.5
     数据库大多提供主从热备功能，通过配置两台数据库主从关系，来实现读写分离。
     应用服务器使用专门的数据访问模块，使数据库读写分离对应用透明。
     问：mysql如何配置？
**** 1.2.6
     CDN和反向代理的基本原理都是缓存，区别在CDN部署在网络提供商的机房，用户请求时，从距离自己最近的网络提供获取数据；
     反向代理部署在网站的中心机房，用户请求到达中心机房后，最先访问的就是反向代理服务器，如果反向代理上缓存着用户资源就直接返回。
**** 1.2.7
     分布式数据库是网站数据库拆分的最后手段，只有在单表数据量非常大的时候才使用。
     常用的手段是业务分库，将不同业务的数据库部署在不同的物理服务器上。
**** 1.2.8
     应用服务器通过一个统一数据访问模块访问各种数据，减轻管理诸多数据源的麻烦。
**** 1.2.9
     分而治之，将整个网站业务分成不同的产品线，如淘宝将首页，商铺，订单，买家，卖家拆分成不同的产品线，分到不同的业务团队。
     应用之间使用超链接简历联系也可以使用消息队列进行数据分发。
**** 1.2.10
     随着业务拆分越来越小，存储系统越来越大，应用系统的整体复杂度指数级增加，部署维护越来越困难。
     每个应用系统执行许多相同的业务操作，比如用户管理，商品管理等，那么可以将公共业务提取出来，独立部署，面向服务的系统。
     分布式服务调用共用业务系统完成具体业务操作。
*** 1.3
    网站的价值在于它能为用户提供什么价值，在于网站能做什么，而不在于它是怎么做的。
    创新的业务发展模式对网站架构逐步提出更高要求。
    是业务成就了技术，是事业成就了人，而不是相反。
*** 1.4
    12306的真正问题在于它的业务架构而不是技术架构。不应该整点开始售票而应该分几个时间段售票。
    技术是用来解决业务问题的，业务的问题也可以通过业务的手段去解决。
** 2. 架构模式
   什么是模式？每一个模式描述了一个在我们周围不断重复发生的问题及该问题解决方案的核心。
   这样你能重复使用该方案二不必做重复工作。
**** 2.1.1 分层
     将系统在横向维度上切分成几个部分，每个部分负责一部分相对单一的职责。
     然后通过上层对下层的依赖和调用组成一个完整的系统。

     例子：网络的7层通信协议，计算机硬件，操作系统，应用软件；MVC设计模式，分成应用层，服务层，数据层，便于分工合作开发和维护。
     分层的难点在：必须合理规划层次边界和接口。
**** 2.1.2 分割
     分割就是纵向对软件进行切分，将不同的功能和服务分割开来，包装成高内聚低耦合的模块单元。
**** 2.1.3 分布式
     分层和分割的一个主要目的是：为了切分后的模块便于分布式部署，通过远程调用协同工作。
***** 分布式的问题：
      1.必须通过网络请求，对性能造成影响；2.服务器宕机；3.分布式数据一致性，分布式事务难以保证；4.导致服务以来错综复杂，开发管理维护困难。
***** 分布式方案：
      1. 分布式应用和服务
      2. 分布式静态资源，动静分离
      3. 分布式数据和存储
      4. 分布式计算
      5. 分布式配置，分布式锁，分布式文件
**** 2.1.4 集群
     多台服务器部署相同应用构成一个集群，通过负载均衡设备共同对外提供服务。
**** 2.1.5 缓存
     缓存的定义：
     将数据存放在距离计算最近的位置一加快处理速度。
     缓存是改善然性能的第一手段。

     缓存方案手段
     CDN，反向代理，本地缓存，分布式缓存。

     使用缓存的2个前提：
     1.二八定理，数据访问频率不一样
     2.数据在一定时间段内有效，不会立刻国企，否则缓存中的数据因为失效而产生脏读，再说数据太快失效，缓存也就没意义了。
**** 2.1.6 异步
     降低软件耦合性。
     业务之间的消息传递不是同步调用，而是将一个业务操作分成多个阶段，每个阶段之间通过共享数据的方式异步执行。
     单机上多线程通过共享内存队列的方式实现异步；多机分布式通过消息队列实现异步。
     异步架构是典型的生产者消费者模式。

     MQ特性：
     1. 提高系统可用性
     2. 加快网站访问速度
     3. 消峰
     4. 解耦
**** 2.1.7 冗余
     服务器冗余，数据冗余备份。
     数据库除了定期备份，存档保存，实现冷备份外，还有做主从分离，数据实时同步热备份。
**** 2.1.8 自动化
     自动化代码管理；自动化发布；自动化测试；自动化安全检测；自动化部署；自动化监控报警；自动化失效转移；自动化失效回复；自动化降级；
*** 2.2 微博架构
    多级缓存：热门微博和明星用户微博在所有服务器上缓存；活跃用户在分布式缓存；不活跃用户之间读写数据库。
    多idc：用户可以就近访问数据中心，也作为其他数据中心的数据冗余灾备中心。
*** 2.3
    架构模式受其使用场景限制，对系统的要求和约束也很多。
    好的设计绝对不是模仿，不是生搬硬套某个模式，而是在对问题深刻理解之上的创造和创新。
** 3. 架构要素
   架构的定义：最高层次的规划，难以改变的决定，决定事物未来的发展方向和最终蓝图。
   软件架构：有关软件整体结构与组件的抽象描述，用于指导大学软件系统各个方面的设计。
   性能，可用性，伸缩性，扩展性，安全性5个核心要素。
*** 3.1 性能
    从用户浏览器到数据库，影响用户请求的所有环节都可以性能优化。
    浏览器端：浏览器缓存，页面压缩，合理布局，CDN加速，缓存图片
    应用服务器：本地缓存，分布式缓存，异步调用，机器，
    代码层面：多线程，各种线程池，数据库连接池等
    数据库：缓存，索引，SQL优化


    衡量网站性能指标：QPS，TPS，响应时间，系统性能计数器等。
*** 3.2 可用性
    4个9，服务器失效转移，不保存转态信息，会话信息
*** 3.3 伸缩性
    伸缩性：能够不断的向集群堆机器，并能达到很好的立刻服务。
    关系数据库的集群伸缩性因为事务的原因，必须在数据库之外实现，通过路由分区等手段。
*** 3.4 扩展性
    扩展性和软件的耦合性密切相关，好的标准是：网站增加新业务时，对当前产品，业务无影响，对当前架构的改动也较小。
    网站扩展性的手段：1.事件驱动；2.分布式服务
    事件驱动使用消息队列实现；分布式服务通过将业务封装成独立的服务实现，通过分布式服务框架调用，如dubbo。
