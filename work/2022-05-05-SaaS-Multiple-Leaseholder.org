* SaaS多租户设计
节约成本、按需付费、即租即用

多租户架构也被称为单实例架构（Single Instance）。
但是由于多租户SaaS架构需要具备相同的硬件、网络和操作系统配置能力，所以很难实现根据单一用户的需求去做功能上的定制化，
也很难根据某个用户的请求进行常规的系统升级、重启之类的操作。

如果多租户是多个人租一套房子，每个人拥有一个房间，那么单租户就是一个人租一套房子
每个数据库仅存储来自一个租户的数据，因此单租户模式通常也被称为多实例架构(Multiple Instance)。
单租户模式下，不同客户之间的应用软件和数据一般通过硬件来进行隔离

2、数据备份复杂程度不同

SaaS单租户拥有独立数据库，因此备份恢复客户数据库非常容易。而多租户是共用一个数据库，租户的数据既有隔离又有共享，
系统不能每天自动执行企业的独立备份。若企业需要数据备份，必须每天通过API自己去手动操作。
如果出现故障，数据恢复比较困难，因为牵扯到其他租户的数据，所以需要逐表逐条备份和还原
，倘若需要跨租户统计数据，更是困难。这也是多租户SaaS架构的最大缺点。
实现如何于多用户的环境下共用相同的系统或程序组件，并且仍可确保各用户间数据的隔离性。
多租户简单来说是指一个单独的实例可以为多个组织服务。



租户和用户实际是不同的两个概念，租户更多的是为了资源管理和计费计量使用，而用户更多的是为了业务功能和授权使用。
多租户意味着应用逻辑层面的隔离，


针对多租户使用者（客户和公司），多租户系统主要解决以下几个层面的需求：

租户注册与身份认证、账号管理、权限配置；
计费方式、定价、收费、支付、欠费；
应用增删改查、代码接入教程、应用监控、统计报表、消息中心；
数据存储方案、安全机制；

N个客户同时使用同一套SaaS服务。
构建SaaS体系需要完成两部分工作：上层服务+底层多租户系统。

上层服务是供应商对外售卖的软件服务，其可以为客户创造价值、为公司带来营收；
而底层多租户系统则是SaaS模式实现的具体方式，公司在对外售卖SaaS服务时，需要考虑如何实现客户之间的数据隔离、
服务的权限控制、计费管理等；因此需要引入多租户概念来解决上述问题。

多租户技术，是一种软件架构技术，它是在探讨与实现如何于多用户的环境下共享相同的系统或程序组件，
并且仍可确保各用户间资料的隔离性；简单来说是指一个单独的实例可以为多个组织服务。

租户是指被赋予了SaaS服务使用权的企业组织，即客户。
