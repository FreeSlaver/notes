* Nacos 笔记
** 带着问题去学习



** 五一的任务就是搞定nacos，gradle，spring cloud这一套。

大概的意思好像是这样的，在nacos中配置了common-redis.yml

哦，搞懂了，比如user-service中的bootstrap.yml中指定了依赖的config有
common-redis.yml，这样就能在系统变量中，SystemProperties中拿到所有redis相关的配置，
然后通过spring的redis templage来注入这些属性，

那是怎么注入的了？如果修改common-redis.yml中的字段会出问题吗？

果然order-service中的RedisUtil就是用的common-service中的，
那user中不会有2个RedisUtils？的确也有，但是为撒navigate只查出来一个？

现在要弄清楚的是怎么注入进去的？
在common-service中SqlAutoUpdateConfiguration中配置的，nacos中配置的common-datasource.yml
对应到这个类中的DruidDataSource，
想想怎么把项目打包拿回家看，项目直接压缩包，还需要些什么？nacos的配置，mysql的配置，redis的配置？

InitializeDataConfiguration


在哪个common-service中有哪个InitializeDataConfiguration，会根据哪个服务名称去db中查询出服务对应的字典表
比如system-service通过feign调用，Response<String> commonDict = systemClient.findCommonDict();

最终在service中调用的是DictServiceImpl中的这个方法：
public String findCommonDict() {
        List<Dict> roots = list();//这里半天没看懂窝草，list是直接查表的，
        DictServiceImpl extends ServiceImpl<DictMapper, Dict> implements DictService
        就直接查询的Dict的表
        List<Dict> list = roots.stream().filter(e -> e.getParentId() == 0).collect(Collectors.toList());
        List<Dict> childrenList = roots.stream().filter(e -> e.getParentId() != 0).collect(Collectors.toList());
        Map<Integer, List<Dict>> collect = childrenList.stream().collect(Collectors.groupingBy(Dict::getParentId));
        Map<String, List<KV>> map = new HashMap<>();
        //添加根据typeName分类的数据
        list.forEach(e -> map.put(e.getTypeName(),

** nacos
大概是这么个意思，默认就是使用内部的derby数据库，然后要使用mysql的话，把前面的注释去掉，执行下config中的sql语句。
spring.datasource.platform=mysql
db.num=1
db.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?useSSL=false&useUnicode=true&characterEncoding=utf-8&serverTimezone=Hongkong
db.user=root
db.password =123456

执行下面的nacos-mysql.sql和schema.sql。

** nacos常见问题
  nacos-client升级了，但是spring-cloud-alibaba中的没升级，需要依赖中exclude出去，然后另外添加。
  客户端 CPU 高，或者内存耗尽的问题
  其中一种情况是 Nacos 客户端实例在 Spring Cloud Alibaba 服务框架中被反复构造了多次，可以参考 Issue
  日志打印频繁的问题
  access 日志大量打印，相关 Issue 点击这里。

主要表现是 {nacos.home}/logs/access_log.2019-xx-xx.log 类似格式文件名的日志大量打印，而且还不能自动清理和滚动。
这个日志是 Spring Boot 提供的 Tomcat 访问日志打印，Spring Boot 在关于该日志的选项中，没有最大保留天数或者日志大小控制的选项。因此这个日志的清理必须由应用新建 Crontab 任务来完成，或者通过以下命令关闭日志的输出（在生产环境我们还是建议开启该日志，以便能够有第一现场的访问记录）：
server.tomcat.accesslog.enabled=false

服务端业务日志大量打印且无法动态调整日志级别。这个问题在 1.1.3 已经得到优化，可以通过 API 的方式来进行日志级别的调整，调整日志级别的方式如下：

# 调整naming模块的naming-raft.log的级别为error:
curl -X PUT '$nacos_server:8848/nacos/v1/ns/operator/log?logName=naming-raft&logLevel=error'
# 调整config模块的config-dump.log的级别为warn:
curl -X PUT '$nacos_server:8848/nacos/v1/cs/ops/log?logName=config-dump&logLevel=warn'

nacos client 1.4.1不可用
