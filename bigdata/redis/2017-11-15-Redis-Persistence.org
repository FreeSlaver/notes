* Redis持久化-翻译
  你看这个没什么用，你应该发送脑袋自己想。其实持久化的机制就那么多。
  我发现我学习的思维方式还是：看东西--理解别人在说什么--做笔记记忆。
  但是做笔记还有个很大的好处：加深理解，便于以后复习，笔试面试等。
  1.RDB
  间隔指定时间做一个当前时间点的快照

  2.AOF
  使用append-only写持久化日志，使用和Redis协议相同的格式。
  当服务器重启时，通过重读日志构建内存数据库。

  可以完全不使用持久化机制，也可以结合使用AOF和RDB。
  但是重启时，只使用AOF，因为AOF更完整。

  优势，缺点是和使用场景结合起来的。
  RDB的优点
  1.单个时间点对应单个压缩文件，做备份非常好。
  比如你可用于每个小时，每天做一个备份。
  2.便于灾难恢复，单个压缩文件很容易在数据中心间传播
  3.最大化redis的性能，定时持久化时，只需fork一个子进程进行IO操作
  4.在大数据集下，RDB能更快启动

  RDB的缺点
  1.容易丢数据
  在2次持久化之间，如果redis挂了，持久化定时任务没得到执行，就会丢数据。
  虽然可以通过设置更短的时间间隔，比如5分钟，但是依然会丢数据。而且，
  不够灵活，产生的数据文件会非常多。
  2.会造成服务短暂停顿
  每次执行持久化任务，会调用fork()生成子进程，如果数据集太大，或cpu性能不好，，
  就会造成短暂停顿，停顿期间无法提供服务。


  AOF的优点
  1.更具持久性
  可以蚕蛹不同的fsync策略：无fsync，每秒fsync，每次查询fsync。
  默认策略是每秒fsync，使用后台线程进行IO操作，主线程会在没有fsync线程时，
  努力写操作。但依然可能丢掉1秒的数据。
  2.append only
  没有检索，没有腐败问题，即使一个操作只写了一般，可以用redis-check-aof工具修复
  3.
  4.AOF文件易懂，能解析
  并且能够手动修改，去掉部分命令不让执行。
