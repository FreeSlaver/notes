* Zipkin Brave源码
** 草稿
   几个核心概念要弄清楚：Span,Tracer,TraceContext,Propagation

   使用Builder的目的是为了生成immutable object，

   Span继承了一个SpanCustomizer接口，是为了让用户更安全自定义Span。
   Span类和Span的外在定义不太一样，外在的定义更类似于TraceContext。
   Span这个类提供很多的方法来操作Span的生命周期，start，finish，

   Span和TracerContext的关系是，span被attach（依附）到一定区域（scope）的上下文中，比如一个线程，一个进程等。
   然后在其他方法中能从上下文中取出当前的span。

   Tracer，追踪者，使用Tracer来捕捉请求的完整调用路径，产生root，child span的。

   TraceContext，追踪上下文，可以注射或者榨取出追踪相关的信息，比如Http头部中的特定标示，还有http method，url等。

   现在brave4加了很多新特性，参照：https://github.com/openzipkin/brave/tree/master/brave

   Propagation 传播机制
   反过来看就是：TraceContext是绑定到InheritableThreadLocal中的，然后可以从这里得到CurrentTraceContext。
   从CurrentTracContext中可以得到Scope，组装成SpanInScope。然后从里面可以从SpanInScope中得到Span。
   但是这里有个问题就是SpanInScope是一种资源，为了防止泄露，也需要close掉。也就是释放掉当前Span的引用。

   Brave4的设计是借用与Finagle的，实现了传播上下文机制和进程中数据的采集分离。
