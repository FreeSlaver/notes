* Kafka Consumer
在这篇文章里面我会根据官方wiki讲清楚kafka consumer端的一些关键机制

** CG
   每一个broker会被选为一个协调者(coordinator)，负责cg的子集。当CG成员改变，或者
prtitions改变，会策划一次rebalance，并且broker协调者(co-ordinator broker)负责最终
的consumer拥有的partition配置。

*** 消费者Consumer
   1.  当启动或者broker协调者(co-ordinator)挂掉，消费者发一个请求到任意一个brokers中
，响应中会被告知broker协调者在哪里。
   2. 消费者会连到broker协调者并且开始发送心跳。如果一个非法的一代(IllegalGeneration)
错误码返回，那么表明broker协调者已经发起了rebalance。此时消费者停止拉取数据，提交
offsets，然后向broker协调者发送加入一个加入CG的请求(JoinGroupRequest)，消费者会
接收到它能够拥有的topic partitions列表和新的一代id(new generation id)。这样，CG管理
就完成了，并且consumer开始消费和提交他拥有的partitions的offsets。
   3. 如果没错误发送，消费者继续拉取消费，提交自己拥有的partitions的offsets。

*** broker协调者Co-ordinator
    1. 跟踪每个消费者的健康情况，通过失败探测协议。
    2. 在选举或者启动时候，co-ordinator从zk中读取它管理的CG和响应关系。如果之前没有
CG信息，它会撒也不做，知道有CG注册到它上面。
    3. 直到co-ordinator完成装载所有的CG信息，对所有的心跳请求，offset提交请求，加入
Group请求，都会发挥CoordinatorStartupNotComplete错误码。消费者就会进行重试。
    4. 在选举或者启动时候，co-ordinator就会启动失败探测机制，如果有消费者被标为死亡
就会被移除并进行reblance。
    5. 心跳响应中返回非法代的错误码会触发rebalance，只有当所有的CG成员都重新注册后
，co-ordinator会告知CG成员新的partition拥有关系。
    6. co-ordinator会追踪所有CG消费的topic partitions改变，新加一个partition会触发
reblance，先注册但是后来新创建的topic也会触发。

*** 失败探测机制Failure detection protocol
    其实就是一个双向心跳机制，任何一方在session.timeout.ms时间内没有接受到另外一方的
响应就认为对方挂了，有一点是心跳的发送间隔是session.timeout.ms/heartheat.frequency。
co-ordinator挂了，消费者会开始寻找co-ordinator，也就是上文说的向所有broker发信息。
     接收到消费者心跳后，co-ordinator会校验generation number，consumer id和consumer
group。

*** broker协调者co-ordinator
保存一下信息
    1. CG订阅的主题列表
    2. CG的配置信息，包括session timeout
    3. 消费者元数据，包括主机名，consumer id
    4. 消费者当前在每个topic partition的offsets
    5. partitions从属关系元数据，consumer被分配的partitions映射map

** 最新的consumer实现
   To support client-side assignment, we propose to split the group management protocol into two phases: group membership and state synchronization.
The first phase is used to set the active members of the group and to elect a group leader.
The second phase is used to enable the group leader to synchronize member state in the group (in other words to assign each member's state).

*** 协调者状态机
    - 关闭：CG中没有存活成员，CG状态已经被清理。
    - 初始化：协调者从ZK（或其他存储）中读取CG信息，为了将CG从失败的协调者接管过来
      。任何心跳或者加入CG请求都会被返回一个错误码，表明协调者没准备好。
    - 稳定态：此状态下，协调者要么有活跃的一代，要么没有任何成员并且等待第一个加入CG
      的请求。心跳请求会被接收，用来保活，或者表明它们要加入CG。
    - 陆续加入：协调者已经接收了至少一个成员以上的加入CG请求，并且等待CG中剩余成员的加入
      CG请求。如果心跳或者同步CG状态请求被返回错误码表明正在进行rebalance。
    - 同步等待：加入CG阶段结束后，协调者会等待leader（协调者从所有消费者中随机选取）的CG
      状态信息。向协调者发送的请求如果返回错误码，表明正在进行rebalance。
https://cwiki.apache.org/confluence/download/attachments/61312126/consumer.png?version=3&modificationDate=1443760073000&api=v2


真TM太多东西，无从搞起啊。


** Reference
[[https://cwiki.apache.org/confluence/display/KAFKA/Kafka+0.9+Consumer+Rewrite+Design][Kafka Consumer Rewrite Design]]
