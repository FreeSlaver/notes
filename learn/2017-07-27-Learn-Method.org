* 学习方法
  The best way to learn any language, including SQL, is to use it to make progress toward something you care about.

  Unless you somehow think SQL is the most mesmerizing thing in the universe, it's hard to sit down and grok through W3School and its ilk.
  Instead, you should find a problem that interests you that requires some knowledge of SQL.
** 必须找到和其他知识最多连接点的知识。
怎么快速的学习了？我不可能css3的新特性一个个看到，但是我要了解到有些什么东西，能干撒，具体如何干，
   后续遇到我再来查资料。
** 看看我们之前的学习方法多么的傻
   必须歇希仁的，很多东西都是大概的讲一讲，然后要死记硬背下来。

   后面的习题，都是从书中找到答案，解释名词。我草，真傻比。

每次遇到有什么不会的，先想想，试一下，然后Google。
然后看的时候，顺便把api也查看一下，看api尽量看完全，就像看java类一样的。

其实编程都是大同小异。语法要多看2遍，因为多看2遍的时间远小于以后每次都查询，Google的时间。

做全栈，做产品。

就来写这个页面吧。。
** 练习的时候，针对自己不会的练习，
   也就是遇难而上，因为那些你会了的，还会做，
   只有挑战并完成不会的，你的技能才能得到磨练

   首先，最重要的还是要搞清楚，理解透彻，原理是怎么，
   这个起作用的机制是什么。
   然后知道这个机制，原理对应的api是那个（这个一定要知道）
   ，具体的怎么用，api的语法是什么，大概知道就行，到时候要用，就去查，
   然后使用的次数多了，就记下来了。

   等等，我们先回到问题的起点：
   在有一个header的时候，如果将container居中。。。
   水平没问题，垂直了？？？一定要居中？我看未必，
** 看到一个新奇的功能，你就自己马上试试，看看能不能做出来，
   不能，就马上google，然后找答案做出来。

既然如此，那么从务实的观点上看，为什么去学习不能在可见范围内创生价值的东西，而不是去学习立刻可以变现的东西。
这里最关键的就是聚焦，聚焦的根本则是要在限定时间范围内创生价值

有时候会看到这样一种现象：很多人自学的东西和工作中用的东西完全没关系。比如：一边用着C#做Web开发，一边自己学习着C/C++做嵌入式
这也就意味着脱离项目实践的学习投入产出比往往会差。

再比如说：你可能看了很多设计的书，但从来没有从头到尾写过什么程序，总是在既有代码上修修改改，或者只是完成几千行代码的小工具，那么你的设计知识是很难融汇贯通的，也还是无法很好的承担大系统的设计工作


*原则：在没有好好完成一件事情之后，不要开始另外一项工作*
遇到不懂的，马上问，马上搞清楚。
实在无法弄清楚的，询问他人，让别人教你。

可能是我这辈子学习效率最高的时光, 接触了一大堆以前都没怎么听过的概念, TDD, Continuous integration, Pair, Scrum, Refactor, Deployment... 这里面任何一个单独的概念都足以写好几本书, 并够我研究上好一整子. 但可惜的是没有这么多时间让我先看完所有相关的书, 再开始干活, 于是边干边学成了我唯一选择. 先知道一些粗浅的概念, 然后开始干, 通过 Tim 的反馈再结合自己遇到的问题, 然后针对性的看书和 google 资料.

*不要期望看完了书再开始做事, 边学边干才是高效的学习方式 我越来越觉得这是唯一的学习方式了. :p*

, 好的工程师不是只会"追求极致", 而是懂得如何在 "质量" 和 "成本" 上 make a right trade-off.

想尽一切办法和更优秀的人一起工作，即使你可能只能当凤尾。(蒜泥也好，清炒也罢)

找到你的社区，加入他们，参加他们的活动。同一个社区的人总是有某种程度的相似性，你很容易认识那些和你有 common sense 的人。相信我这些人将在你未来的职业生涯里起到举足轻重的作用。
Learning out of context is more difficult than learning with relatable context.

https://www.reddit.com/r/learnprogramming/comments/5zc24o/the_best_way_to_learn_how_to_code/
很多事情根本不需要提问，你自己就能动用大脑思考出来。
   现在的人们太蠢，被Google，知乎这种东西给惯坏了。
because we realized that in order to build something we need to quit thinking about it, and actually do it.
调试代码，看代码，写代码，是最好的学习方式，和写作是一样的。

在学习的过程中学会学习，反思自身学习的过程。

多学习，理解基础的东西。

今天的行动会影响到明天的，比如我现在不搞掉测试问题的话，明天早上可能就要花费时间搞。
心理学家实验发现，大脑偏爱纸质书。对于好书和需要深度研读的图书，最好以纸质书为主
开始对过往的知识进行了连接，用所谓高速公路理论来说，就是通往一个地方的路越多，越容易记忆，理解。

如何阅读能达到更好的理解，作者这里给出了答案，对话式的阅读。通过提出问题，来与作者对话。不是在记录答案，而是提出问题，让作者来解答。

** 学习是什么
首先，学习是什么，我的理解是：理解和记忆。我们所做的努力，都是为了达成两者，并且有些努力同时达成两者。
那学习方法是什么，就是最快速、高效的理解和记忆。不过有学习方法是不够的。要完成我的目标“最快速，最有效率的来进行自学，并且在考试中取得高分。”
应该是由3个方面来构成。1、最快读、高效的学习方法 2、最明确、细致的考试策略。3、最有效的精力与时间管理
** 学习是什么自我思考
  你看这个没什么用，你应该发送脑袋自己想。其实持久化的机制就那么多。
  我发现我学习的思维方式还是：看东西--理解别人在说什么--做笔记记忆。
  但是做笔记还有个很大的好处：加深理解，便于以后复习，笔试面试等。
在知乎多答题，增加曝光度。
多输出，然后反思，评价，修改自己的作品，结果集。
编程要寻求：相同点，相异点。这非常重要，然后将相异的搞成相同的，之后在一起处理。
一定要多反思自己写的代码

不对，应该是说，刚开始，学习一样东西得时候，
先大概了解这个东西能够用来干撒。不要深入细节。
而等以后要做某个功能，知道能够用某个东西能够实现就够了，虽然不知道具体如何实现，
这就是关键了。在实际实践中，具体来使用这个具体的功能。

我之前的学习，就是抱着一本书，从头看到尾，每个地方都不放过。
然后到做东西得时候，两眼抓瞎，撒都不会。

这个也是做事业，做产品，应该使用的方法，到要干这个事情的时候，在现炒现卖。
但是，最初，首先得知道能够用写什么方法，这个方法的优劣，适用场景都要非常清晰。

过去太多时间被浪费了。
  发现一种稍微更好的学习方式，就是自己不断地调试css，这样印象更加深刻。

最好的学习方式之一：读源码，看人家是如何写代码的，然后到时候需要相关的功能，直接先抄过来，
有问题了，再来debug。而且看的过程中，直接就知道了，应该如何写代码。

如何学习BootStrap？那就是直接了解之后，开干。
拿一个个越来越复杂的模板，直接来实现，然后看区别在哪里，哪里没掌握，然后立马去相应的章节学习，
搞完之后，东西虽然外表看起来一样，但是细节有区别，比较下，两种代码风格，写法之间的优劣。
WELL DONE。以后就不要问如何学习XXX了，哈哈哈。掌握了学习的方法。
