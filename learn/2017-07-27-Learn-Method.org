* 学习方法
  The best way to learn any language, including SQL, is to use it to make progress toward something you care about.

  Unless you somehow think SQL is the most mesmerizing thing in the universe, it's hard to sit down and grok through W3School and its ilk.
  Instead, you should find a problem that interests you that requires some knowledge of SQL.
** 必须找到和其他知识最多连接点的知识。
怎么快速的学习了？我不可能css3的新特性一个个看到，但是我要了解到有些什么东西，能干撒，具体如何干，
   后续遇到我再来查资料。
** 看看我们之前的学习方法多么的傻
   必须歇希仁的，很多东西都是大概的讲一讲，然后要死记硬背下来。

   后面的习题，都是从书中找到答案，解释名词。我草，真傻比。

每次遇到有什么不会的，先想想，试一下，然后Google。
然后看的时候，顺便把api也查看一下，看api尽量看完全，就像看java类一样的。

其实编程都是大同小异。语法要多看2遍，因为多看2遍的时间远小于以后每次都查询，Google的时间。

做全栈，做产品。

就来写这个页面吧。。
** 练习的时候，针对自己不会的练习，
   也就是遇难而上，因为那些你会了的，还会做，
   只有挑战并完成不会的，你的技能才能得到磨练

   首先，最重要的还是要搞清楚，理解透彻，原理是怎么，
   这个起作用的机制是什么。
   然后知道这个机制，原理对应的api是那个（这个一定要知道）
   ，具体的怎么用，api的语法是什么，大概知道就行，到时候要用，就去查，
   然后使用的次数多了，就记下来了。

   等等，我们先回到问题的起点：
   在有一个header的时候，如果将container居中。。。
   水平没问题，垂直了？？？一定要居中？我看未必，
** 看到一个新奇的功能，你就自己马上试试，看看能不能做出来，
   不能，就马上google，然后找答案做出来。

既然如此，那么从务实的观点上看，为什么去学习不能在可见范围内创生价值的东西，而不是去学习立刻可以变现的东西。
这里最关键的就是聚焦，聚焦的根本则是要在限定时间范围内创生价值

有时候会看到这样一种现象：很多人自学的东西和工作中用的东西完全没关系。比如：一边用着C#做Web开发，一边自己学习着C/C++做嵌入式
这也就意味着脱离项目实践的学习投入产出比往往会差。

再比如说：你可能看了很多设计的书，但从来没有从头到尾写过什么程序，总是在既有代码上修修改改，或者只是完成几千行代码的小工具，那么你的设计知识是很难融汇贯通的，也还是无法很好的承担大系统的设计工作


*原则：在没有好好完成一件事情之后，不要开始另外一项工作*
