* How to Learn Programming
  编程作为一门语言，有语言的特点。

  首先我们来回想一下：我们是如何学习母语的。

  我们在上幼儿园之前就能说话，比如刚开始的“妈妈”，“爸爸”，
  这是因为有人教我们（妈妈，爸爸），而且我们马上练习，模仿，
  在这个过程中还会得到指导，纠正，直到正确的结果。
  其次，我们能够很快的得到反馈。

  刚开始我们并不知道是什么意思，但是我们知道结果是对的。

  后面，我们开始去幼儿园，老师会教我们abcd 26个字母，
  之后，我们开始学习一些非常简单，常用的单个汉字，
  再之后，我们开始学习简单的词汇，句子。

  然后我们自己也开始根据词语造句，还会在同学之间比较，
  为什么这句话造的好，为什么不好，老师都会教。

  在之后，我们就开始做阅读理解，阅读稍短的文章，然后写出中心思想，大意，
  还有这篇文章哪里写的好，哪里不好，等等。

  再之后的提升就是需要自我不断的练习，看长篇巨作。
  虽然这个时候，我们已经能够很容易的看完一本小说，一本书，而且读书笔记，
  中心思想等等都能写的很不错，但是有可能我们自己依然写不出来一部小说。

  因为我们练习写小说的实践太少了，而且外界没有要求，也没有指导。
** 编程学习
   将婴儿学习母语的过程映射到编程语言的学习过程中来，我们来看看有和异同。

   首先我们也是学习最基本的东西，比如操作符，比较符，变量，数据类型等等。
   之后我们学习一些较大的，简单的东西，比如简单集合，map，list等。

   之后我们学习了对象，类class，然后是线程，

   再之后我们学习简单的一些工具，比如JDBC,HTTP等。
   再后面还有什么垃圾回收，等等。

   后面还要学习一些工具，svn，git，eclipse，maven等等。

   我们再来看一些教程，都是大段大段的文字，而且有些，甚至大部分的东西你都已经知道了，
   还要去看一遍，这极大的浪费了时间。

   所以，最好的学习方式是：解决问题。有什么不懂的，立马去学，去搞透彻，
   理解透彻，熟练的搞出东西来。

*** 做些项目学习
    我们再来看看：通过项目来学习。
    很多项目都很低级，有点项目非常古老，所用的技术已经远远落后了。
    *技术更新非常快*
    所以，我们去混Github吧。找感兴趣的项目，




*** 坑爹的学校和培训机构
    再来看看，我们学习编程的经历。
    先来说说坑爹的学校和培训机构：
**** 学校
     在学校，傻逼老师和傻逼学生，为了应付考试，都强调的是死记硬背，
     拿着一本书，从头讲到尾，然后告知会考试的重点部分给记下来，
     之后的课后习题选几题，即使到期中，期末考试也是这些题目。

     但是在大学里，就连这些死记硬背，课后习题，很多人连看都没看。
     即使那些考试90多分的人，也谈不上对概念的理解。

**** 培训机构
     培训机构只有3到4个月，甚至为了更加赚钱，多开几班，直接时间压缩到2到3个月。
     然后就是不断的放视频。但是明显相较于学校有个最大的好处：
     开始动手编码，即使是边写边抄，但是最少比光看不做的要强的多。


** 草稿
不要死记，要内部消化
要熟悉编程范式，尤其是面向过程及面向对象这两种；要广泛阅读，多用编译器及IDE（网上有许多免费的）练习编程。
而要去多买些数据结构方面的书来看，学习搜索、分类、二叉树及链表创建等概念
学习编程语言并不容易，因为这是一门需要时常调用逻辑思维的知识
Project Euler或者Codecademy[1]这样的网站上看看，上面有简单的编程作业及教程，可以用以练习并提高技能。
如果你认识比你更厉害的人，就要与他分享你的想法和问题，这样会使你积累更多的经验；你也可以模仿诸如文本编辑器、windows软件等专业软件来进行自主开发；
懂得一种编程语言是很赞的，但更赞的就是懂得多门语言，这不仅仅意味着你的“工具箱”里有了更多的“工具”，更是意味着你掌握了更多解决问题的方法。因为不论你惯用哪种语言，懂得其他语言总是能使你更好地了解常见的抽象概念及问题。


许多高水平的程序员阅读量也十分惊人，他们也往往会在输入第一行代码前深思熟虑一番。所以，你一定要多阅读、多思考。每周都要检查一次自己的作品（平时要养成保存代码的习惯，这样日后才能复查、反思）；还要多买编程方面的好书。购买的书必须是最值得一看的，

勤加练习。要养成用编程解决问题的习惯，
TopCoder - 这是美国著名的编程竞赛网站，能够极大地增长算法方面的知识。
Codeforces - 另一种编程竞赛网站，这里举行竞赛的频率要略高于TopCoder。
Project Euler - 该网站上有许多涉及的编程问题。
CodeAbbey - 该网站上有许多初学者经常会遇到的问题，其难度低于上述所有网站。

编写自己感兴趣或者能够真正投入使用的程序要比照着教科书上的案列来做有趣得多。那么，你不妨利用搜索引擎来搜寻自己感兴趣的项目。

学习新知识的时候，亲手实践、做出改动、预测结果这一过程是非常重要的，因为这样你才能把一个概念吃透
多和其他程序员交流，多看其他人写的程序。这比看任何书、上任何课程都有用。

这个是效率时代，什么语言生产效率高，就用什么，
研究底层实现这种事情，初学者是不可能搞定的。

*最后才回头自学C语言和C++，非常好上手。*
正确的做法是，将你的重点始终放在一个地方，对于你构建应用来说的其他必要技术，只要做到可用、够用即可。
书籍是必备的，不要指望看视频或靠别人教能学到什么。

计划一个真正的项目

不要满足于做做小DEMO、小工具。把眼光放远点，去计划一个称得上是产品的项目。

做小工具和做系统是两回事，做工具你可能会把注意力集中在算法和实现细节上，而做系统，你就会考虑到架构，以及不同模块之间如何协同工作的问题。这也会把你引领到面向对象设计（OOAD）的道路上来，从一个大局和整体去设计系统，这是学编程所真正应该领悟的。

然后学完就写。这就是学习方法。
几乎每一个成功的程序员，都写过很多工具。

可能很多工程师都知道投资工具一定会有回报，但如果我们实际地把花在各类事情上的时间统计一下就会发现，用于开发工具的时间好像并不多。而 Johnson 团队中最好的程序员几乎把三分之一的时间都花在了工具上：代码部署工具、系统监控工具、以及任何能够让他们用更少的时间做到更多的事情的工具。

如果一件事，机器能为你代劳，就不要再自己去做了。

4. 优化迭代速度
假设从一个函数调用找到它的原型需要花费 12 秒，而你每天要做 60 次类似的查找。也就是说你每天要花 12 分钟的时间在查找函数上。如果你能够通过熟练掌握编辑器的键盘快捷键，把 12 秒缩短到 2 秒，那么你每天就能省下 10 分钟。一年就能省下 40 个小时，这就是整整一周的工作时间。

如果再找到 3 处类似的优化，一年就能省下一个月。想想你能用这一个月多做多少事情吧！

又比如说你在调试，你发现每次需要启动应用，先后点击五次鼠标，从而达成对应的条件来触发一个 bug。那么你能不能花 10 分钟写一段模拟代码使得每次重新启动应用都能直接触发 bug 呢？只要 10 分钟，将来的调试都能节省大量的时间，这笔投资不划算吗？

总是系统性地问自己：“我要如何才能更快地迭代？”你将会收获许多，并且随着时间的推移，回报就像利滚利一样变得越来越丰厚。
practice make perfect。

http://v.youku.com/v_show/id_XNTIzNzE2NzQ4.html
多数学校不会教的东西

